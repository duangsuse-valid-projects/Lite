/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2015  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Modified by duangsuse to compat Lite lexical rules */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class Scanner implements Symbol, java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int STRING_SINGLE = 4;
    /* The ZZ_CMAP_Z table has 2176 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
                    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33" +
                    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1" +
                    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21" +
                    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7" +
                    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");
    /* The ZZ_CMAP_Y table has 3584 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1" +
                    "\17\3\0\1\20\1\21\1\22\1\23\2\11\1\24\3\11\1\24\71\11\1\25\1\11\1\26\1\27" +
                    "\1\30\1\31\2\27\16\0\1\32\1\20\1\33\1\34\2\11\1\35\11\11\1\36\21\11\1\37\1" +
                    "\40\23\11\1\27\1\41\3\11\1\24\1\42\1\41\4\11\1\43\1\44\4\0\1\45\1\46\1\27" +
                    "\3\11\2\47\1\27\1\50\1\51\1\0\1\52\5\11\1\53\3\0\1\54\1\55\13\11\1\56\1\45" +
                    "\1\57\1\60\1\0\1\61\1\27\1\62\1\63\3\11\3\0\1\64\12\11\1\65\1\0\1\66\1\27" +
                    "\1\0\1\67\3\11\1\53\1\70\1\23\2\11\1\65\1\71\1\72\1\73\2\27\3\11\1\74\10\27" +
                    "\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\11\1\101\2\0\1\102\1\11\1\103\1\0\2" +
                    "\41\1\104\1\105\1\106\2\11\1\75\1\107\1\110\1\111\1\112\1\62\1\113\1\103\1" +
                    "\0\1\114\1\51\1\104\1\115\1\106\2\11\1\75\1\116\1\117\1\120\1\121\1\122\1" +
                    "\123\1\124\1\0\1\125\1\27\1\104\1\36\1\35\2\11\1\75\1\126\1\110\1\45\1\127" +
                    "\1\130\1\27\1\103\1\0\1\42\1\27\1\104\1\105\1\106\2\11\1\75\1\126\1\110\1" +
                    "\111\1\121\1\124\1\113\1\103\1\0\1\42\1\27\1\131\1\132\1\133\1\134\1\135\1" +
                    "\132\1\11\1\136\1\137\1\140\1\141\1\27\1\124\1\0\1\27\1\42\1\104\1\32\1\75" +
                    "\2\11\1\75\1\142\1\143\1\144\1\140\1\145\1\26\1\103\1\0\2\27\1\146\1\32\1" +
                    "\75\2\11\1\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1\147\1\27\1\146" +
                    "\1\32\1\75\4\11\1\150\1\144\1\151\1\62\1\27\1\103\1\0\1\27\1\40\1\146\1\11" +
                    "\1\24\1\40\2\11\1\35\1\152\1\24\1\153\1\154\1\0\2\27\1\155\1\27\1\41\5\11" +
                    "\1\156\1\157\1\160\1\77\1\0\1\161\4\27\1\162\1\163\1\164\1\41\1\165\1\166" +
                    "\1\156\1\167\1\170\1\171\1\0\1\172\4\27\1\130\2\27\1\161\1\0\1\161\1\173\1" +
                    "\174\1\11\1\41\3\11\1\30\1\44\1\0\1\144\1\175\1\0\1\44\3\0\1\50\1\176\7\27" +
                    "\5\11\1\53\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203\1\11\1\204\1\205" +
                    "\1\0\1\171\4\11\1\36\1\22\5\11\1\206\51\11\1\133\1\24\1\133\5\11\1\133\4\11" +
                    "\1\133\1\24\1\133\1\11\1\24\7\11\1\133\10\11\1\207\4\27\2\11\2\27\12\11\1" +
                    "\30\1\27\1\41\114\11\1\105\2\11\1\41\2\11\1\47\11\11\1\132\1\130\1\27\1\11" +
                    "\1\32\1\210\1\27\2\11\1\210\1\27\2\11\1\211\1\27\1\11\1\32\1\212\1\27\6\11" +
                    "\1\213\3\0\1\214\1\215\1\0\1\161\3\27\1\216\1\0\1\161\13\11\1\27\5\11\1\217" +
                    "\10\11\1\220\1\27\3\11\1\30\1\0\1\2\1\0\1\2\1\124\1\0\3\11\1\220\1\30\1\27" +
                    "\5\11\1\114\2\0\1\55\1\161\1\0\1\161\4\27\2\11\1\160\1\2\6\11\1\175\1\77\3" +
                    "\0\1\111\1\0\1\161\1\0\1\161\1\43\13\27\1\221\5\11\1\213\1\0\1\221\1\114\1" +
                    "\0\1\161\1\27\1\222\1\2\1\27\1\223\3\11\1\102\1\202\1\0\1\67\4\11\1\65\1\0" +
                    "\1\2\1\27\4\11\1\213\2\0\1\27\1\0\1\224\1\0\1\67\3\11\1\220\12\27\1\225\2" +
                    "\0\1\226\1\227\1\27\30\11\4\0\1\77\2\27\1\76\42\11\2\220\4\11\2\220\1\11\1" +
                    "\230\3\11\1\220\6\11\1\32\1\170\1\231\1\30\1\232\1\114\1\11\1\30\1\231\1\30" +
                    "\1\27\1\222\3\27\1\233\1\27\1\43\1\130\1\27\1\234\1\27\1\50\1\235\1\42\1\43" +
                    "\2\27\1\11\1\30\3\11\1\47\2\27\1\0\1\50\1\236\1\0\1\237\1\27\1\240\1\40\1" +
                    "\152\1\241\1\31\1\242\1\11\1\243\1\244\1\245\2\27\5\11\1\130\116\27\5\11\1" +
                    "\24\5\11\1\24\20\11\1\30\1\246\1\247\1\27\4\11\1\36\1\22\7\11\1\43\1\27\1" +
                    "\62\2\11\1\24\1\27\10\24\4\0\5\27\1\43\72\27\1\244\3\27\1\41\1\204\1\241\1" +
                    "\30\1\41\11\11\1\24\1\250\1\41\12\11\1\206\1\244\4\11\1\220\1\41\12\11\1\24" +
                    "\2\27\3\11\1\47\6\27\170\11\1\220\11\27\71\11\1\30\6\27\21\11\1\30\10\27\5" +
                    "\11\1\220\41\11\1\30\2\11\1\0\1\247\2\27\5\11\1\160\1\76\1\251\3\11\1\62\12" +
                    "\11\1\161\3\27\1\43\1\11\1\40\14\11\1\252\1\114\1\27\1\11\1\47\11\27\1\11" +
                    "\1\253\1\254\2\11\1\53\2\27\1\130\6\11\1\114\1\27\1\67\5\11\1\213\1\0\1\50" +
                    "\1\27\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\11\1\65\1\171\2\11\1\160\1\0\1\2" +
                    "\1\27\3\11\1\30\1\100\5\11\1\53\1\0\1\237\1\43\1\0\1\161\4\27\5\11\1\102\1" +
                    "\77\1\27\1\254\1\255\1\0\1\161\2\11\1\24\1\256\6\11\1\201\1\257\1\217\2\27" +
                    "\1\260\1\11\1\53\1\261\1\27\3\262\1\27\2\24\22\27\4\11\1\53\1\263\1\0\1\161" +
                    "\64\11\1\114\1\27\2\11\1\24\1\264\5\11\1\114\40\27\55\11\1\220\15\11\1\26" +
                    "\4\27\1\24\1\27\1\264\1\265\1\11\1\75\1\24\1\170\1\266\15\11\1\26\3\27\1\264" +
                    "\54\11\1\220\2\27\10\11\1\40\6\11\5\27\1\11\1\30\2\0\2\27\1\77\1\27\1\135" +
                    "\2\27\1\244\3\27\1\42\1\32\20\11\1\267\1\234\1\27\1\0\1\161\1\41\2\11\1\115" +
                    "\1\41\2\11\1\47\1\270\12\11\1\24\3\40\1\271\1\272\2\27\1\273\1\11\1\142\2" +
                    "\11\1\24\2\11\1\274\1\11\1\220\1\11\1\220\4\27\17\11\1\47\10\27\6\11\1\30" +
                    "\20\27\1\275\20\27\3\11\1\30\6\11\1\130\5\27\3\11\1\24\2\27\3\11\1\47\6\27" +
                    "\3\11\1\220\4\11\1\114\1\11\1\241\5\27\23\11\1\220\1\0\1\161\52\27\1\220\1" +
                    "\75\4\11\1\36\1\276\2\11\1\220\25\27\2\11\1\220\1\27\3\11\1\26\10\27\7\11" +
                    "\1\270\10\27\1\277\1\76\1\142\1\41\2\11\1\114\1\120\4\27\3\11\1\30\20\27\6" +
                    "\11\1\220\1\27\2\11\1\220\1\27\2\11\1\47\21\27\11\11\1\130\66\27\1\223\6\11" +
                    "\1\0\1\77\3\27\1\124\1\0\2\27\1\223\5\11\1\0\1\300\2\27\3\11\1\130\1\0\1\161" +
                    "\1\223\3\11\1\160\1\0\1\144\1\0\10\27\1\223\5\11\1\53\1\0\1\301\1\27\1\0\1" +
                    "\161\24\27\5\11\1\53\1\0\1\27\1\0\1\161\46\27\55\11\1\24\22\27\14\11\1\47" +
                    "\63\27\5\11\1\24\72\27\7\11\1\130\130\27\10\11\1\30\1\27\1\102\4\0\1\77\1" +
                    "\27\1\62\1\223\1\11\14\27\1\26\153\27\1\302\1\303\2\0\1\304\1\2\3\27\1\305" +
                    "\22\27\1\306\67\27\12\11\1\32\10\11\1\32\1\307\1\310\1\11\1\311\1\142\7\11" +
                    "\1\36\1\312\2\32\3\11\1\313\1\170\1\40\1\75\51\11\1\220\3\11\1\75\2\11\1\206" +
                    "\3\11\1\206\2\11\1\32\3\11\1\32\2\11\1\24\3\11\1\24\3\11\1\75\3\11\1\75\2" +
                    "\11\1\206\1\314\6\0\1\142\3\11\1\162\1\41\1\206\1\315\1\240\1\316\1\162\1" +
                    "\230\1\162\2\206\1\123\1\11\1\35\1\11\1\114\1\317\1\35\1\11\1\114\50\27\32" +
                    "\11\1\24\5\27\106\11\1\30\1\27\33\11\1\220\74\27\1\122\3\27\14\0\20\27\36" +
                    "\0\2\27");
    /* The ZZ_CMAP_A table has 1664 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\11\1\3\1\2\1\106\1\107\1\1\6\11\4\0\1\3\1\70\1\26\1\5\1\10\1\77\1\74\1" +
                    "\27\1\56\1\57\1\6\1\72\1\65\1\25\1\23\1\73\1\12\1\20\1\100\1\17\1\101\1\21" +
                    "\1\104\1\102\1\103\1\13\1\71\1\64\1\7\1\67\1\4\1\0\1\66\3\16\1\105\1\24\1" +
                    "\22\5\10\1\14\13\10\1\15\2\10\1\62\1\30\1\63\1\76\1\10\1\0\1\37\1\35\1\46" +
                    "\1\31\1\32\1\33\1\10\1\51\1\52\1\10\1\40\1\53\1\54\1\41\1\34\1\47\1\55\1\36" +
                    "\1\45\1\43\1\44\1\10\1\50\1\42\2\10\1\60\1\75\1\61\1\0\6\11\1\110\2\11\2\0" +
                    "\4\10\4\0\1\10\2\0\1\11\7\0\1\10\4\0\1\10\5\0\7\10\1\0\2\10\4\0\4\10\16\0" +
                    "\5\10\7\0\1\10\1\0\1\10\1\0\5\10\1\0\2\10\6\0\1\10\1\0\3\10\1\0\1\10\1\0\4" +
                    "\10\1\0\13\10\1\0\3\10\1\0\5\11\2\0\6\10\1\0\7\10\1\0\1\10\15\0\1\10\1\0\15" +
                    "\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11\3\10\5\0\5\11\6\0\1\10\4\0\3\11\5" +
                    "\0\3\10\7\11\4\0\2\10\1\11\13\10\1\0\1\10\7\11\2\10\2\11\1\0\4\11\2\10\2\11" +
                    "\3\10\2\0\1\10\7\0\1\11\1\10\1\11\6\10\3\11\2\0\11\10\3\11\1\10\6\0\2\11\6" +
                    "\10\4\11\2\10\2\0\2\11\1\10\11\11\1\10\3\11\1\10\5\11\2\0\1\10\3\11\4\0\1" +
                    "\10\1\0\6\10\4\0\13\11\1\0\4\11\6\10\3\11\1\10\2\11\1\10\7\11\2\10\2\11\2" +
                    "\0\2\11\1\0\3\11\1\0\10\10\2\0\2\10\2\0\6\10\1\0\1\10\3\0\4\10\2\0\1\11\1" +
                    "\10\7\11\2\0\2\11\2\0\3\11\1\10\5\0\2\10\1\0\5\10\4\0\3\10\4\0\2\10\1\0\2" +
                    "\10\1\0\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\10" +
                    "\1\0\1\10\7\0\4\11\3\10\1\11\2\0\1\10\1\0\2\10\1\0\3\10\2\11\1\0\3\11\2\0" +
                    "\1\10\11\0\1\11\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10" +
                    "\3\0\2\10\3\0\2\10\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\10\6\0\1\11\4\10\1\0\5" +
                    "\10\3\0\1\10\7\11\1\0\2\11\5\0\2\11\3\0\2\11\1\0\3\10\1\0\2\10\5\0\3\10\2" +
                    "\0\1\10\3\11\1\0\4\11\1\10\1\0\4\10\1\0\1\10\4\0\1\11\4\0\6\11\1\0\1\11\3" +
                    "\0\2\11\4\0\1\10\1\11\2\10\7\11\4\0\10\10\3\11\7\0\2\10\1\0\1\10\2\0\2\10" +
                    "\1\0\1\10\2\0\1\10\6\0\4\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\3\10\2" +
                    "\11\1\0\2\11\1\10\2\0\5\10\1\0\1\10\1\0\6\11\2\0\2\11\2\0\4\10\5\0\1\11\1" +
                    "\0\1\11\1\0\1\11\4\0\2\11\5\10\3\11\6\0\1\11\1\0\7\11\1\10\2\11\4\10\3\11" +
                    "\1\10\3\11\2\10\7\11\3\10\4\11\5\10\14\11\1\10\1\11\3\10\1\0\7\10\2\0\3\11" +
                    "\2\10\3\11\3\0\2\10\2\11\4\0\1\10\1\0\2\11\4\0\4\10\10\11\3\0\1\10\3\0\2\10" +
                    "\1\11\5\0\3\11\2\0\1\10\1\11\1\10\5\0\6\10\2\0\5\11\3\10\3\0\10\11\5\10\2" +
                    "\11\3\0\3\10\3\11\1\0\5\11\4\10\1\11\4\10\3\11\2\10\2\0\1\10\1\0\1\10\1\0" +
                    "\1\10\1\0\1\10\2\0\3\10\1\0\6\10\2\0\2\10\2\106\5\11\5\0\1\10\5\0\6\11\1\0" +
                    "\1\11\3\0\4\11\11\0\1\10\4\0\1\10\1\0\5\10\2\0\1\10\1\0\4\10\1\0\3\10\2\0" +
                    "\4\10\5\0\5\10\4\0\1\10\4\0\4\10\3\11\2\10\5\0\2\11\2\0\3\10\6\11\1\0\2\10" +
                    "\2\0\4\10\1\0\2\10\1\11\3\10\1\11\4\10\1\11\10\10\2\11\4\0\1\10\1\11\4\0\1" +
                    "\11\5\10\2\11\3\0\3\10\4\0\3\10\2\11\2\0\6\10\1\0\3\11\1\0\2\11\5\0\5\10\5" +
                    "\0\1\10\1\11\3\10\1\0\2\10\1\0\7\10\2\0\1\11\6\0\2\10\2\0\3\10\3\0\2\10\3" +
                    "\0\2\10\2\0\3\11\4\0\3\10\1\0\2\10\1\0\1\10\5\0\1\11\2\0\1\10\3\0\1\10\2\0" +
                    "\2\10\3\11\1\0\2\11\1\0\3\11\2\0\1\11\2\0\1\11\4\10\10\0\5\11\3\0\6\11\2\0" +
                    "\3\11\2\0\4\11\4\0\3\11\5\0\1\10\2\0\2\10\2\0\4\10\1\0\4\10\1\0\1\10\1\0\6" +
                    "\10\2\0\5\10\1\0\4\10\1\0\4\10\2\0\2\11\1\0\1\10\1\0\1\10\5\0\1\10\1\0\1\10" +
                    "\1\0\3\10\1\0\3\10\1\0\3\10");
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2
    };
    private static final String ZZ_ACTION_PACKED_0 =
            "\3\0\1\1\2\2\1\3\1\2\1\4\1\5\1\6" +
                    "\2\7\1\10\1\11\1\12\1\13\14\6\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
                    "\1\36\2\37\1\40\1\1\1\36\2\41\1\42\1\1" +
                    "\1\43\1\0\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\0\3\51\1\54\1\52\1\0\1\55" +
                    "\1\56\1\57\1\0\1\6\1\60\4\6\1\33\3\6" +
                    "\1\61\2\6\1\62\3\6\1\63\1\64\1\6\1\65" +
                    "\1\66\1\67\1\70\1\71\1\72\2\73\1\74\1\75" +
                    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\2\0" +
                    "\1\105\2\106\2\51\1\52\2\0\1\107\1\110\2\6" +
                    "\1\111\4\6\1\32\1\6\1\112\4\6\1\113\1\114" +
                    "\1\73\2\0\1\115\1\106\2\51\1\0\1\116\1\117" +
                    "\4\6\1\120\1\121\3\6\1\106\2\51\1\0\1\122" +
                    "\1\123\2\6\1\124\1\125\1\6\1\106\2\51\1\0" +
                    "\1\126\1\6\1\127\1\106\2\51\1\0\1\130\1\106" +
                    "\2\51\1\0\1\106\2\51\1\0\1\106\2\51\2\0" +
                    "\2\51\1\131\1\0\2\51\1\0\2\51\1\0\2\51" +
                    "\1\0\2\51\1\0\2\51\1\0\1\51\1\52\1\0" +
                    "\5\52";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\111\0\222\0\333\0\u0124\0\333\0\u016d\0\u01b6" +
                    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\333" +
                    "\0\333\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4" +
                    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\333\0\333\0\333" +
                    "\0\333\0\333\0\333\0\333\0\333\0\333\0\u076a\0\u07b3" +
                    "\0\u07fc\0\u0845\0\333\0\333\0\333\0\333\0\333\0\u088e" +
                    "\0\u08d7\0\333\0\333\0\u0920\0\u0969\0\u09b2\0\333\0\333" +
                    "\0\u09fb\0\333\0\u0a44\0\333\0\333\0\333\0\333\0\333" +
                    "\0\u0a8d\0\u0ad6\0\333\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\333" +
                    "\0\u0c43\0\u0c8c\0\333\0\333\0\333\0\u0cd5\0\u0d1e\0\u0291" +
                    "\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0291\0\u0e8b\0\u0ed4\0\u0f1d" +
                    "\0\u0291\0\u0f66\0\u0faf\0\u0291\0\u0ff8\0\u1041\0\u108a\0\u0291" +
                    "\0\u0291\0\u10d3\0\u111c\0\u1165\0\333\0\333\0\333\0\333" +
                    "\0\u11ae\0\u11f7\0\333\0\333\0\333\0\333\0\333\0\333" +
                    "\0\333\0\333\0\333\0\u1240\0\u1289\0\333\0\u12d2\0\u131b" +
                    "\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u0291\0\u0291\0\u14d1" +
                    "\0\u151a\0\u0291\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u0291\0\u1687" +
                    "\0\u0291\0\u16d0\0\u1719\0\u1762\0\u17ab\0\333\0\333\0\333" +
                    "\0\u17f4\0\u183d\0\333\0\u1886\0\u18cf\0\u1918\0\u1961\0\u0291" +
                    "\0\u0291\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u0291\0\u0291\0\u1ace" +
                    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u0291\0\u0291" +
                    "\0\u1ccd\0\u1d16\0\u0291\0\u0291\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a" +
                    "\0\u1e83\0\u0291\0\u1ecc\0\u0291\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0" +
                    "\0\u0291\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef" +
                    "\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437" +
                    "\0\333\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636" +
                    "\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e" +
                    "\0\u28c7\0\u2910\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d" +
                    "\0\u2ac6";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\4\1\14\1\15\3\13\3\15\1\13\1\16\1\13" +
                    "\1\17\1\20\1\21\1\4\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\30\1\13\1\31\1\13\1\32\1\13" +
                    "\1\33\2\13\1\34\1\13\1\35\3\13\1\36\1\37" +
                    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47" +
                    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57" +
                    "\5\15\1\13\1\4\1\6\1\4\1\60\1\61\1\62" +
                    "\23\60\1\63\1\60\1\64\60\60\1\65\1\66\1\67" +
                    "\24\65\1\70\1\71\60\65\113\0\1\6\112\0\1\72" +
                    "\1\73\61\0\1\74\21\0\1\10\1\5\1\6\106\10" +
                    "\6\0\1\75\60\0\1\76\30\0\1\77\57\0\1\100" +
                    "\31\0\13\13\1\0\1\13\4\0\25\13\22\0\6\13" +
                    "\2\0\1\13\12\0\1\101\1\102\1\103\1\104\1\0" +
                    "\1\105\1\106\1\107\1\110\1\111\1\112\4\0\1\113" +
                    "\1\112\1\110\6\0\1\104\10\0\1\103\24\0\1\105" +
                    "\2\107\1\102\1\107\1\113\15\0\2\15\1\103\2\0" +
                    "\3\15\1\110\1\111\1\112\4\0\1\113\1\112\1\110" +
                    "\17\0\1\103\24\0\5\15\1\113\15\0\2\111\3\0" +
                    "\3\111\56\0\5\111\31\0\1\114\41\0\1\115\10\0" +
                    "\1\116\20\0\13\13\1\0\1\13\4\0\1\13\1\117" +
                    "\1\13\1\120\21\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\10\13\1\121\11\13\1\122" +
                    "\2\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\3\13\1\123\2\13\1\124\16\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\5\13\1\125\17\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\5\13\1\126\17\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\1\13\1\127\23\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\10\13\1\130\3\13\1\131" +
                    "\10\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\1\13\1\132\17\13\1\133\3\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\3\13\1\134\1\13\1\135\17\13\22\0\6\13\2\0" +
                    "\1\13\10\0\13\13\1\0\1\13\4\0\15\13\1\136" +
                    "\7\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\20\13\1\137\4\13\22\0\6\13\2\0" +
                    "\1\13\10\0\13\13\1\0\1\13\4\0\2\13\1\140" +
                    "\5\13\1\141\12\13\1\142\1\13\22\0\6\13\2\0" +
                    "\1\13\67\0\1\143\110\0\1\144\112\0\1\145\106\0" +
                    "\1\146\2\0\1\147\16\0\1\60\2\0\23\60\1\0" +
                    "\1\60\1\0\60\60\2\0\1\62\106\0\1\150\2\0" +
                    "\7\150\1\151\4\150\2\151\1\152\4\150\1\153\1\154" +
                    "\1\155\2\150\1\156\1\150\1\157\1\160\2\150\1\161" +
                    "\1\150\1\162\34\150\1\151\2\152\1\150\1\152\1\150" +
                    "\3\0\1\65\2\0\24\65\2\0\60\65\2\0\1\67" +
                    "\106\0\1\163\2\0\24\163\1\154\5\163\1\157\3\163" +
                    "\1\161\1\163\1\162\42\163\3\0\6\164\1\165\102\164" +
                    "\12\0\1\101\1\102\1\166\2\0\1\105\1\106\1\107" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\1\105\2\107\1\102\1\107\1\113\15\0" +
                    "\2\102\3\0\3\102\1\110\1\111\1\112\4\0\1\113" +
                    "\1\112\1\110\44\0\5\102\1\113\15\0\1\167\1\170" +
                    "\2\0\5\170\1\0\1\170\4\0\3\170\1\0\1\170" +
                    "\1\0\1\170\6\0\1\170\31\0\6\170\15\0\1\171" +
                    "\1\102\1\166\2\0\3\171\1\110\1\111\1\112\4\0" +
                    "\1\113\1\112\1\110\17\0\1\166\24\0\3\171\1\102" +
                    "\1\171\1\113\15\0\1\107\1\102\1\166\2\0\3\107" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\3\107\1\102\1\107\1\113\15\0\1\172" +
                    "\1\102\1\166\2\0\3\172\1\110\1\111\1\112\4\0" +
                    "\1\113\1\112\1\110\17\0\1\166\24\0\3\172\1\102" +
                    "\1\172\1\113\15\0\2\111\3\0\3\111\1\110\1\0" +
                    "\1\112\4\0\1\113\1\112\1\110\44\0\5\111\1\113" +
                    "\15\0\2\173\3\0\3\173\3\0\1\174\44\0\1\174" +
                    "\5\0\5\173\24\0\1\175\100\0\13\13\1\0\1\13" +
                    "\4\0\2\13\1\176\22\13\22\0\6\13\2\0\1\13" +
                    "\10\0\13\13\1\0\1\13\4\0\1\177\24\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\14\13\1\200\4\13\1\201\3\13\22\0\6\13\2\0" +
                    "\1\13\10\0\13\13\1\0\1\13\4\0\5\13\1\202" +
                    "\17\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\22\13\1\203\2\13\22\0\6\13\2\0" +
                    "\1\13\10\0\13\13\1\0\1\13\4\0\1\13\1\204" +
                    "\23\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\12\13\1\205\11\13\1\206\22\0\6\13" +
                    "\2\0\1\13\10\0\13\13\1\0\1\13\4\0\1\207" +
                    "\24\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\11\13\1\210\13\13\22\0\6\13\2\0" +
                    "\1\13\10\0\13\13\1\0\1\13\4\0\22\13\1\211" +
                    "\2\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\13\13\1\212\11\13\22\0\6\13\2\0" +
                    "\1\13\10\0\13\13\1\0\1\13\4\0\3\13\1\213" +
                    "\21\13\22\0\6\13\2\0\1\13\10\0\13\13\1\0" +
                    "\1\13\4\0\21\13\1\214\3\13\22\0\6\13\2\0" +
                    "\1\13\10\0\13\13\1\0\1\13\4\0\16\13\1\215" +
                    "\6\13\22\0\6\13\2\0\1\13\67\0\1\216\110\0" +
                    "\1\217\33\0\1\152\4\0\3\152\56\0\3\152\1\0" +
                    "\1\152\16\0\1\220\4\0\3\220\56\0\3\220\1\0" +
                    "\1\220\4\0\5\164\1\221\107\164\1\0\1\222\103\164" +
                    "\12\0\1\167\1\170\1\223\1\0\5\170\1\0\1\170" +
                    "\4\0\3\170\1\0\1\170\1\0\1\170\6\0\1\170" +
                    "\4\0\1\223\24\0\6\170\15\0\2\224\1\223\1\0" +
                    "\5\224\1\0\1\224\4\0\3\224\1\0\1\224\1\0" +
                    "\1\224\6\0\1\224\4\0\1\223\24\0\6\224\15\0" +
                    "\1\225\1\102\1\166\2\0\3\225\1\110\1\111\1\112" +
                    "\4\0\1\113\1\112\1\110\17\0\1\166\24\0\3\225" +
                    "\1\102\1\225\1\113\15\0\1\226\1\102\1\166\2\0" +
                    "\3\226\1\110\1\111\1\112\4\0\1\113\1\112\1\110" +
                    "\17\0\1\166\24\0\3\226\1\102\1\226\1\113\15\0" +
                    "\2\173\3\0\3\173\1\110\6\0\1\113\1\0\1\110" +
                    "\44\0\5\173\1\113\15\0\2\173\3\0\3\173\56\0" +
                    "\5\173\105\0\1\227\17\0\13\13\1\0\1\13\4\0" +
                    "\1\13\1\230\23\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\2\13\1\231\22\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\14\13\1\232\10\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\6\13\1\233\16\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\13\13\1\234\11\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\13\13\1\235\11\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\12\13\1\236\12\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\1\13\1\237\23\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\16\13\1\240\6\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\22\13\1\241\2\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\3\13\1\242\21\13\22\0\6\13\2\0\1\13\5\164" +
                    "\1\221\1\164\1\6\101\164\7\0\1\6\113\0\2\243" +
                    "\1\223\1\0\5\243\1\0\1\243\4\0\3\243\1\0" +
                    "\1\243\1\0\1\243\6\0\1\243\4\0\1\223\24\0" +
                    "\6\243\15\0\1\244\1\102\1\166\2\0\3\244\1\110" +
                    "\1\111\1\112\4\0\1\113\1\112\1\110\17\0\1\166" +
                    "\24\0\3\244\1\102\1\244\1\113\15\0\1\245\1\102" +
                    "\1\166\2\0\3\245\1\110\1\111\1\112\4\0\1\113" +
                    "\1\112\1\110\17\0\1\166\24\0\3\245\1\102\1\245" +
                    "\1\113\105\0\1\246\16\0\13\13\1\0\1\13\4\0" +
                    "\1\13\1\247\23\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\7\13\1\250\15\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\5\13\1\251\17\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\21\13\1\252\3\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\1\13\1\253\23\13\22\0\6\13\2\0\1\13\10\0" +
                    "\13\13\1\0\1\13\4\0\1\13\1\254\23\13\22\0" +
                    "\6\13\2\0\1\13\10\0\13\13\1\0\1\13\4\0" +
                    "\5\13\1\255\17\13\22\0\6\13\2\0\1\13\12\0" +
                    "\2\256\1\223\1\0\5\256\1\0\1\256\4\0\3\256" +
                    "\1\0\1\256\1\0\1\256\6\0\1\256\4\0\1\223" +
                    "\24\0\6\256\15\0\1\257\1\102\1\166\2\0\3\257" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\3\257\1\102\1\257\1\113\15\0\1\260" +
                    "\1\102\1\166\2\0\3\260\1\110\1\111\1\112\4\0" +
                    "\1\113\1\112\1\110\17\0\1\166\24\0\3\260\1\102" +
                    "\1\260\1\113\104\0\1\261\17\0\13\13\1\0\1\13" +
                    "\4\0\10\13\1\262\14\13\22\0\6\13\2\0\1\13" +
                    "\10\0\13\13\1\0\1\13\4\0\5\13\1\263\17\13" +
                    "\22\0\6\13\2\0\1\13\10\0\13\13\1\0\1\13" +
                    "\4\0\12\13\1\264\12\13\22\0\6\13\2\0\1\13" +
                    "\12\0\2\265\1\223\1\0\5\265\1\0\1\265\4\0" +
                    "\3\265\1\0\1\265\1\0\1\265\6\0\1\265\4\0" +
                    "\1\223\24\0\6\265\15\0\1\266\1\102\1\166\2\0" +
                    "\3\266\1\110\1\111\1\112\4\0\1\113\1\112\1\110" +
                    "\17\0\1\166\24\0\3\266\1\102\1\266\1\113\15\0" +
                    "\1\267\1\102\1\166\2\0\3\267\1\110\1\111\1\112" +
                    "\4\0\1\113\1\112\1\110\17\0\1\166\24\0\3\267" +
                    "\1\102\1\267\1\113\106\0\1\270\15\0\13\13\1\0" +
                    "\1\13\4\0\1\13\1\271\23\13\22\0\6\13\2\0" +
                    "\1\13\12\0\2\272\1\223\1\0\5\272\1\0\1\272" +
                    "\4\0\3\272\1\0\1\272\1\0\1\272\6\0\1\272" +
                    "\4\0\1\223\24\0\6\272\15\0\1\273\1\102\1\166" +
                    "\2\0\3\273\1\110\1\111\1\112\4\0\1\113\1\112" +
                    "\1\110\17\0\1\166\24\0\3\273\1\102\1\273\1\113" +
                    "\15\0\1\274\1\102\1\166\2\0\3\274\1\110\1\111" +
                    "\1\112\4\0\1\113\1\112\1\110\17\0\1\166\24\0" +
                    "\3\274\1\102\1\274\1\113\22\0\1\275\103\0\2\276" +
                    "\1\223\1\0\5\276\1\0\1\276\4\0\3\276\1\0" +
                    "\1\276\1\0\1\276\6\0\1\276\4\0\1\223\24\0" +
                    "\6\276\15\0\1\277\1\102\1\166\2\0\3\277\1\110" +
                    "\1\111\1\112\4\0\1\113\1\112\1\110\17\0\1\166" +
                    "\24\0\3\277\1\102\1\277\1\113\15\0\1\300\1\102" +
                    "\1\166\2\0\3\300\1\110\1\111\1\112\4\0\1\113" +
                    "\1\112\1\110\17\0\1\166\24\0\3\300\1\102\1\300" +
                    "\1\113\107\0\1\301\16\0\2\302\1\223\1\0\5\302" +
                    "\1\0\1\302\4\0\3\302\1\0\1\302\1\0\1\302" +
                    "\6\0\1\302\4\0\1\223\24\0\6\302\15\0\1\303" +
                    "\1\102\1\166\2\0\3\303\1\110\1\111\1\112\4\0" +
                    "\1\113\1\112\1\110\17\0\1\166\24\0\3\303\1\102" +
                    "\1\303\1\113\15\0\1\304\1\102\1\166\2\0\3\304" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\3\304\1\102\1\304\1\113\104\0\1\305" +
                    "\21\0\2\306\1\223\1\0\5\306\1\0\1\306\4\0" +
                    "\3\306\1\0\1\306\1\0\1\306\6\0\1\306\4\0" +
                    "\1\223\24\0\6\306\15\0\1\307\1\102\1\166\2\0" +
                    "\3\307\1\110\1\111\1\112\4\0\1\113\1\112\1\110" +
                    "\17\0\1\166\24\0\3\307\1\102\1\307\1\113\15\0" +
                    "\1\310\1\102\1\166\2\0\3\310\1\110\1\111\1\112" +
                    "\4\0\1\113\1\112\1\110\17\0\1\166\24\0\3\310" +
                    "\1\102\1\310\1\113\106\0\1\311\17\0\2\312\1\223" +
                    "\1\0\5\312\1\0\1\312\4\0\3\312\1\0\1\312" +
                    "\1\0\1\312\6\0\1\312\4\0\1\223\24\0\6\312" +
                    "\15\0\1\313\1\102\1\166\2\0\3\313\1\110\1\111" +
                    "\1\112\4\0\1\113\1\112\1\110\17\0\1\166\24\0" +
                    "\3\313\1\102\1\313\1\113\15\0\1\314\1\102\1\166" +
                    "\2\0\3\314\1\110\1\111\1\112\4\0\1\113\1\112" +
                    "\1\110\17\0\1\166\24\0\3\314\1\102\1\314\1\113" +
                    "\15\0\2\315\1\223\1\0\5\315\1\0\1\315\4\0" +
                    "\3\315\1\0\1\315\1\0\1\315\6\0\1\315\4\0" +
                    "\1\223\24\0\6\315\15\0\1\316\1\102\1\166\2\0" +
                    "\3\316\1\110\1\111\1\112\4\0\1\113\1\112\1\110" +
                    "\17\0\1\166\24\0\3\316\1\102\1\316\1\113\15\0" +
                    "\1\317\1\102\1\166\2\0\3\317\1\110\1\111\1\112" +
                    "\4\0\1\113\1\112\1\110\17\0\1\166\24\0\3\317" +
                    "\1\102\1\317\1\113\15\0\2\320\1\223\1\0\5\320" +
                    "\1\0\1\320\4\0\3\320\1\0\1\320\1\0\1\320" +
                    "\6\0\1\320\4\0\1\223\24\0\6\320\15\0\1\321" +
                    "\1\102\1\166\2\0\3\321\1\110\1\111\1\112\4\0" +
                    "\1\113\1\112\1\110\17\0\1\166\24\0\3\321\1\102" +
                    "\1\321\1\113\15\0\1\322\1\102\1\166\2\0\3\322" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\3\322\1\102\1\322\1\113\15\0\2\323" +
                    "\1\223\1\0\5\323\1\0\1\323\4\0\3\323\1\0" +
                    "\1\323\1\0\1\323\6\0\1\323\4\0\1\223\24\0" +
                    "\6\323\15\0\1\324\1\102\1\166\2\0\3\324\1\110" +
                    "\1\111\1\112\4\0\1\113\1\112\1\110\17\0\1\166" +
                    "\24\0\3\324\1\102\1\324\1\113\15\0\1\325\1\102" +
                    "\1\166\2\0\3\325\1\110\1\111\1\112\4\0\1\113" +
                    "\1\112\1\110\17\0\1\166\24\0\3\325\1\102\1\325" +
                    "\1\113\15\0\2\326\1\223\1\0\5\326\1\0\1\326" +
                    "\4\0\3\326\1\0\1\326\1\0\1\326\6\0\1\326" +
                    "\4\0\1\223\24\0\6\326\15\0\1\327\1\102\1\166" +
                    "\2\0\3\327\1\110\1\111\1\112\4\0\1\113\1\112" +
                    "\1\110\17\0\1\166\24\0\3\327\1\102\1\327\1\113" +
                    "\15\0\1\330\1\102\1\166\2\0\3\330\1\110\1\111" +
                    "\1\112\4\0\1\113\1\112\1\110\17\0\1\166\24\0" +
                    "\3\330\1\102\1\330\1\113\15\0\2\331\1\223\1\0" +
                    "\5\331\1\0\1\331\4\0\3\331\1\0\1\331\1\0" +
                    "\1\331\6\0\1\331\4\0\1\223\24\0\6\331\15\0" +
                    "\1\332\1\102\1\166\2\0\3\332\1\110\1\111\1\112" +
                    "\4\0\1\113\1\112\1\110\17\0\1\166\24\0\3\332" +
                    "\1\102\1\332\1\113\15\0\1\333\1\102\1\166\2\0" +
                    "\3\333\1\110\1\111\1\112\4\0\1\113\1\112\1\110" +
                    "\17\0\1\166\24\0\3\333\1\102\1\333\1\113\15\0" +
                    "\2\334\1\223\1\0\5\334\1\0\1\334\4\0\3\334" +
                    "\1\0\1\334\1\0\1\334\6\0\1\334\4\0\1\223" +
                    "\24\0\6\334\15\0\1\335\1\102\1\166\2\0\3\335" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\3\335\1\102\1\335\1\113\17\0\1\223" +
                    "\36\0\1\223\47\0\1\336\1\102\1\166\2\0\3\336" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\3\336\1\102\1\336\1\113\15\0\1\337" +
                    "\1\102\1\166\2\0\3\337\1\110\1\111\1\112\4\0" +
                    "\1\113\1\112\1\110\17\0\1\166\24\0\3\337\1\102" +
                    "\1\337\1\113\15\0\1\340\1\102\1\166\2\0\3\340" +
                    "\1\110\1\111\1\112\4\0\1\113\1\112\1\110\17\0" +
                    "\1\166\24\0\3\340\1\102\1\340\1\113\15\0\1\341" +
                    "\1\102\1\166\2\0\3\341\1\110\1\111\1\112\4\0" +
                    "\1\113\1\112\1\110\17\0\1\166\24\0\3\341\1\102" +
                    "\1\341\1\113\15\0\2\102\1\166\2\0\3\102\1\110" +
                    "\1\111\1\112\4\0\1\113\1\112\1\110\17\0\1\166" +
                    "\24\0\5\102\1\113\3\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\3\0\1\11\1\1\1\11\11\1\2\11\14\1\11\11" +
                    "\4\1\5\11\2\1\2\11\3\1\2\11\1\1\1\11" +
                    "\1\0\5\11\2\1\1\11\1\0\3\1\1\11\1\1" +
                    "\1\0\3\11\1\0\26\1\4\11\2\1\11\11\2\0" +
                    "\1\11\5\1\2\0\20\1\3\11\2\0\1\11\3\1" +
                    "\1\0\16\1\1\0\12\1\1\0\6\1\1\0\4\1" +
                    "\1\0\3\1\1\0\3\1\2\0\2\1\1\11\1\0" +
                    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0" +
                    "\2\1\1\0\2\1\1\0\5\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /* user code: */
    StringBuilder string = new StringBuilder();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Scanner(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates characters to character classes
     * Chosen bits are [12, 6, 3]
     * Total runtime size is 14848 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[225];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[225];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[11023];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[225];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
     * Runs the scanner on input files.
     * <p>
     * This main method is the debugging routine for the scanner.
     * It prints debugging information about each returned token to
     * System.out until the end of file is reached, or an error occured.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                Scanner scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new Scanner(reader);
                    while (!scanner.zzAtEOF) scanner.debug_next_token();
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }

    private Symbol symbol(int type) {
        return new LiteSymbol(type, yyline + 1, yycolumn + 1);
    }

    private Symbol symbol(int type, Object value) {
        return new LiteSymbol(type, yyline + 1, yycolumn + 1, value);
    }

    /**
     * assumes correct representation of a long value for
     * specified radix in scanner buffer from <code>start</code>
     * to <code>end</code>
     */
    private long parseLong(int start, int end, int radix) {
        long result = 0;
        long digit;

        for (int i = start; i < end; i++) {
            digit = Character.digit(yycharat(i), radix);
            result *= radix;
            result += digit;
        }

        return result;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall though
                    case '\u000C':  // fall though
                    case '\u0085':  // fall though
                    case '\u2028':  // fall though
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return symbol(EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        throw new RuntimeException("Illegal character \"" + yytext() +
                                "\" at line " + yyline + ", column " + yycolumn);
                    }
                    // fall through
                    case 90:
                        break;
                    case 2: { /* ignore */
                    }
                    // fall through
                    case 91:
                        break;
                    case 3: {
                        return symbol(GT);
                    }
                    // fall through
                    case 92:
                        break;
                    case 4: {
                        return symbol(MULT);
                    }
                    // fall through
                    case 93:
                        break;
                    case 5: {
                        return symbol(LT);
                    }
                    // fall through
                    case 94:
                        break;
                    case 6: {
                        return symbol(IDENTIFIER, yytext());
                    }
                    // fall through
                    case 95:
                        break;
                    case 7: {
                        return symbol(INTEGER_LITERAL, new Integer(yytext()));
                    }
                    // fall through
                    case 96:
                        break;
                    case 8: {
                        return symbol(DOT);
                    }
                    // fall through
                    case 97:
                        break;
                    case 9: {
                        return symbol(MINUS);
                    }
                    // fall through
                    case 98:
                        break;
                    case 10: {
                        yybegin(STRING);
                        string.setLength(0);
                    }
                    // fall through
                    case 99:
                        break;
                    case 11: {
                        yybegin(STRING_SINGLE);
                        string.setLength(0);
                    }
                    // fall through
                    case 100:
                        break;
                    case 12: {
                        return symbol(LPAREN);
                    }
                    // fall through
                    case 101:
                        break;
                    case 13: {
                        return symbol(RPAREN);
                    }
                    // fall through
                    case 102:
                        break;
                    case 14: {
                        return symbol(LBRACE);
                    }
                    // fall through
                    case 103:
                        break;
                    case 15: {
                        return symbol(RBRACE);
                    }
                    // fall through
                    case 104:
                        break;
                    case 16: {
                        return symbol(LBRACK);
                    }
                    // fall through
                    case 105:
                        break;
                    case 17: {
                        return symbol(RBRACK);
                    }
                    // fall through
                    case 106:
                        break;
                    case 18: {
                        return symbol(SEMICOLON);
                    }
                    // fall through
                    case 107:
                        break;
                    case 19: {
                        return symbol(COMMA);
                    }
                    // fall through
                    case 108:
                        break;
                    case 20: {
                        return symbol(AT);
                    }
                    // fall through
                    case 109:
                        break;
                    case 21: {
                        return symbol(EQ);
                    }
                    // fall through
                    case 110:
                        break;
                    case 22: {
                        return symbol(NOT);
                    }
                    // fall through
                    case 111:
                        break;
                    case 23: {
                        return symbol(COLON);
                    }
                    // fall through
                    case 112:
                        break;
                    case 24: {
                        return symbol(PLUS);
                    }
                    // fall through
                    case 113:
                        break;
                    case 25: {
                        return symbol(DIV);
                    }
                    // fall through
                    case 114:
                        break;
                    case 26: {
                        return symbol(AND);
                    }
                    // fall through
                    case 115:
                        break;
                    case 27: {
                        return symbol(OR);
                    }
                    // fall through
                    case 116:
                        break;
                    case 28: {
                        return symbol(XOR);
                    }
                    // fall through
                    case 117:
                        break;
                    case 29: {
                        return symbol(MOD);
                    }
                    // fall through
                    case 118:
                        break;
                    case 30: {
                        string.append(yytext());
                    }
                    // fall through
                    case 119:
                        break;
                    case 31: {
                        throw new RuntimeException("Unterminated string at end of line");
                    }
                    // fall through
                    case 120:
                        break;
                    case 32: {
                        yybegin(YYINITIAL);
                        return symbol(STRING_LITERAL, string.toString());
                    }
                    // fall through
                    case 121:
                        break;
                    case 33: {
                        throw new RuntimeException("Unterminated single-quoted string at end of line");
                    }
                    // fall through
                    case 122:
                        break;
                    case 34: {
                        yybegin(YYINITIAL);
                        return symbol(STRING_LITERAL_SINGLE, string.toString());
                    }
                    // fall through
                    case 123:
                        break;
                    case 35: {
                        return symbol(RSHIFT);
                    }
                    // fall through
                    case 124:
                        break;
                    case 36: {
                        return symbol(GE);
                    }
                    // fall through
                    case 125:
                        break;
                    case 37: {
                        return symbol(PWR);
                    }
                    // fall through
                    case 126:
                        break;
                    case 38: {
                        return symbol(MULTEQ);
                    }
                    // fall through
                    case 127:
                        break;
                    case 39: {
                        return symbol(LSHIFT);
                    }
                    // fall through
                    case 128:
                        break;
                    case 40: {
                        return symbol(LE);
                    }
                    // fall through
                    case 129:
                        break;
                    case 41: {
                        return symbol(INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
                    }
                    // fall through
                    case 130:
                        break;
                    case 42: {
                        return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
                    }
                    // fall through
                    case 131:
                        break;
                    case 43: {
                        return symbol(INTEGER_LITERAL, new Long(yytext().substring(0, yylength() - 1)));
                    }
                    // fall through
                    case 132:
                        break;
                    case 44: {
                        return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0, yylength() - 1)));
                    }
                    // fall through
                    case 133:
                        break;
                    case 45: {
                        return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0, yylength() - 1)));
                    }
                    // fall through
                    case 134:
                        break;
                    case 46: {
                        return symbol(DEC);
                    }
                    // fall through
                    case 135:
                        break;
                    case 47: {
                        return symbol(MINUSEQ);
                    }
                    // fall through
                    case 136:
                        break;
                    case 48: {
                        return symbol(DO);
                    }
                    // fall through
                    case 137:
                        break;
                    case 49: {
                        return symbol(AS);
                    }
                    // fall through
                    case 138:
                        break;
                    case 50: {
                        return symbol(TO);
                    }
                    // fall through
                    case 139:
                        break;
                    case 51: {
                        return symbol(IF);
                    }
                    // fall through
                    case 140:
                        break;
                    case 52: {
                        return symbol(IN);
                    }
                    // fall through
                    case 141:
                        break;
                    case 53: {
                        return symbol(EQUAL);
                    }
                    // fall through
                    case 142:
                        break;
                    case 54: {
                        return symbol(NOTEQ);
                    }
                    // fall through
                    case 143:
                        break;
                    case 55: {
                        return symbol(SQUARE);
                    }
                    // fall through
                    case 144:
                        break;
                    case 56: {
                        return symbol(PLUSEQ);
                    }
                    // fall through
                    case 145:
                        break;
                    case 57: {
                        return symbol(INC);
                    }
                    // fall through
                    case 146:
                        break;
                    case 58: {
                        throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
                    }
                    // fall through
                    case 147:
                        break;
                    case 59: {
                        char val = (char) Integer.parseInt(yytext().substring(1), 8);
                        string.append(val);
                    }
                    // fall through
                    case 148:
                        break;
                    case 60: {
                        string.append('\"');
                    }
                    // fall through
                    case 149:
                        break;
                    case 61: {
                        string.append('\'');
                    }
                    // fall through
                    case 150:
                        break;
                    case 62: {
                        string.append('\\');
                    }
                    // fall through
                    case 151:
                        break;
                    case 63: {
                        string.append('\f');
                    }
                    // fall through
                    case 152:
                        break;
                    case 64: {
                        string.append('\b');
                    }
                    // fall through
                    case 153:
                        break;
                    case 65: {
                        string.append('\r');
                    }
                    // fall through
                    case 154:
                        break;
                    case 66: {
                        string.append('\n');
                    }
                    // fall through
                    case 155:
                        break;
                    case 67: {
                        string.append('\t');
                    }
                    // fall through
                    case 156:
                        break;
                    case 68: {
                        throw new RuntimeException("Illegal escape sequence \'" + yytext() + "\'");
                    }
                    // fall through
                    case 157:
                        break;
                    case 69: {
                        return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength() - 1, 8)));
                    }
                    // fall through
                    case 158:
                        break;
                    case 70: {
                        return symbol(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
                    }
                    // fall through
                    case 159:
                        break;
                    case 71: {
                        return symbol(DEFINE);
                    }
                    // fall through
                    case 160:
                        break;
                    case 72: {
                        return symbol(END);
                    }
                    // fall through
                    case 161:
                        break;
                    case 73: {
                        return symbol(FOR);
                    }
                    // fall through
                    case 162:
                        break;
                    case 74: {
                        return symbol(NULL_LITERAL);
                    }
                    // fall through
                    case 163:
                        break;
                    case 75: {
                        return symbol(FULLEQ);
                    }
                    // fall through
                    case 164:
                        break;
                    case 76: {
                        return symbol(NOTFULLEQ);
                    }
                    // fall through
                    case 165:
                        break;
                    case 77: {
                        return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength() - 1, 16)));
                    }
                    // fall through
                    case 166:
                        break;
                    case 78: {
                        return symbol(ELSE);
                    }
                    // fall through
                    case 167:
                        break;
                    case 79: {
                        return symbol(ELIF);
                    }
                    // fall through
                    case 168:
                        break;
                    case 80: {
                        return symbol(NEXT);
                    }
                    // fall through
                    case 169:
                        break;
                    case 81: {
                        return symbol(BOOLEAN_LITERAL, true);
                    }
                    // fall through
                    case 170:
                        break;
                    case 82: {
                        return symbol(BOOLEAN_LITERAL, false);
                    }
                    // fall through
                    case 171:
                        break;
                    case 83: {
                        return symbol(BREAK);
                    }
                    // fall through
                    case 172:
                        break;
                    case 84: {
                        return symbol(SCOPE);
                    }
                    // fall through
                    case 173:
                        break;
                    case 85: {
                        return symbol(WHILE);
                    }
                    // fall through
                    case 174:
                        break;
                    case 86: {
                        return symbol(RETURN);
                    }
                    // fall through
                    case 175:
                        break;
                    case 87: {
                        return symbol(IMPORT);
                    }
                    // fall through
                    case 176:
                        break;
                    case 88: {
                        return symbol(REQUIRE);
                    }
                    // fall through
                    case 177:
                        break;
                    case 89: {
                        return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
                    }
                    // fall through
                    case 178:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Converts an int token code into the name of the
     * token by reflection on the cup symbol class/interface sym
     * <p>
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    private String getTokenName(int token) {
        try {
            java.lang.reflect.Field[] classFields = sym.class.getFields();
            for (int i = 0; i < classFields.length; i++) {
                if (classFields[i].getInt(null) == token) {
                    return classFields[i].getName();
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

        return "UNKNOWN TOKEN";
    }

    /**
     * Same as next_token but also prints the token to standard out
     * for debugging.
     * <p>
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
        java_cup.runtime.Symbol s = next_token();
        System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1) + " --" + yytext() + "--" + getTokenName(s.sym) + "--");
        return s;
    }


}

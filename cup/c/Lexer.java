/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>c.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner, sym {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\20\1\16\1\52\1\53\1\17\22\0\1\20\1\66\1\55" +
                    "\2\0\1\62\1\63\1\50\1\74\1\75\1\15\1\61\1\72\1\5" +
                    "\1\54\1\14\1\46\11\1\1\73\1\67\1\60\1\57\1\56\1\101" +
                    "\1\0\4\3\1\4\1\7\5\2\1\11\10\2\1\13\2\2\1\47" +
                    "\2\2\1\76\1\51\1\77\1\64\1\2\1\0\1\21\1\24\1\30" +
                    "\1\35\1\26\1\6\1\40\1\32\1\34\1\2\1\27\1\10\1\36" +
                    "\1\33\1\23\1\44\1\2\1\25\1\31\1\22\1\12\1\45\1\42" +
                    "\1\37\1\43\1\41\1\70\1\65\1\71\1\100\6\0\1\52\u1fa2\0" +
                    "\1\52\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\4\3\1\5\1\6" +
                    "\2\7\14\3\1\2\1\1\1\10\1\1\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\33\1\34\1\0\2\2\1\35\1\36\1\37\3\3" +
                    "\2\0\1\3\2\0\1\40\1\41\16\3\1\42\1\3" +
                    "\1\43\4\3\5\0\1\44\1\45\1\46\1\47\1\50" +
                    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60" +
                    "\1\61\1\62\1\2\1\0\1\2\1\3\1\63\3\3" +
                    "\2\64\2\0\21\3\1\65\6\3\1\2\1\66\1\67" +
                    "\1\70\1\3\1\71\2\3\1\0\1\72\4\3\1\73" +
                    "\1\74\1\3\1\75\2\3\1\76\10\3\1\77\2\3" +
                    "\1\100\1\101\1\3\1\102\1\3\1\103\4\3\1\104" +
                    "\2\3\1\105\5\3\1\106\3\3\1\107\1\3\1\110" +
                    "\1\3\1\111\1\112\1\113\1\114\1\115\1\116\3\3" +
                    "\1\117\2\3\1\120\1\3\1\121\1\122\1\123\1\124";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce" +
                    "\0\u0210\0\u0252\0\u0294\0\102\0\u02d6\0\u0318\0\u035a\0\u039c" +
                    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac" +
                    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc" +
                    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\102\0\102" +
                    "\0\102\0\102\0\u098a\0\102\0\102\0\102\0\102\0\102" +
                    "\0\102\0\u09cc\0\u0a0e\0\u0a50\0\102\0\102\0\102\0\u0a92" +
                    "\0\u0ad4\0\u0b16\0\u0672\0\u06f6\0\u0b58\0\u0b9a\0\u0bdc\0\102" +
                    "\0\102\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa" +
                    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\306" +
                    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188" +
                    "\0\u11ca\0\u120c\0\u124e\0\102\0\u1290\0\102\0\102\0\102" +
                    "\0\u12d2\0\102\0\102\0\102\0\102\0\102\0\102\0\102" +
                    "\0\102\0\102\0\u1314\0\u1356\0\102\0\u1398\0\306\0\u13da" +
                    "\0\u141c\0\u145e\0\102\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8" +
                    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8" +
                    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\306" +
                    "\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\102" +
                    "\0\102\0\102\0\u1b96\0\306\0\u1bd8\0\u1c1a\0\u1c5c\0\306" +
                    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\306\0\306\0\u1da6\0\306" +
                    "\0\u1de8\0\u1e2a\0\306\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74" +
                    "\0\u1fb6\0\u1ff8\0\u203a\0\306\0\u207c\0\u20be\0\306\0\306" +
                    "\0\u2100\0\306\0\u2142\0\306\0\u2184\0\u21c6\0\u2208\0\u224a" +
                    "\0\306\0\u228c\0\u22ce\0\306\0\u2310\0\u2352\0\u2394\0\u23d6" +
                    "\0\u2418\0\306\0\u245a\0\u249c\0\u24de\0\306\0\u2520\0\306" +
                    "\0\u2562\0\306\0\306\0\306\0\306\0\306\0\306\0\u25a4" +
                    "\0\u25e6\0\u2628\0\306\0\u266a\0\u26ac\0\306\0\u26ee\0\306" +
                    "\0\306\0\306\0\306";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\3\4\1\5\1\6\1\4\1\7\1\10" +
                    "\1\11\1\4\1\12\1\13\1\14\1\15\1\14\1\16" +
                    "\1\17\1\4\1\20\1\21\1\22\1\4\1\23\1\24" +
                    "\2\4\1\25\1\26\2\4\1\27\1\4\1\30\2\4" +
                    "\1\31\1\32\1\4\1\33\1\2\1\0\1\14\1\34" +
                    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\55\1\56\1\57\1\60\1\61\103\0\1\3\2\0" +
                    "\1\62\3\0\4\63\12\0\1\62\17\0\1\3\5\0" +
                    "\1\64\26\0\4\4\1\0\6\4\5\0\27\4\37\0" +
                    "\1\65\50\0\1\66\1\67\23\0\4\4\1\0\2\4" +
                    "\1\70\3\4\5\0\2\4\1\71\24\4\33\0\4\4" +
                    "\1\0\6\4\5\0\2\4\1\72\24\4\33\0\4\4" +
                    "\1\0\6\4\5\0\27\4\1\73\4\0\1\74\25\0" +
                    "\4\4\1\0\6\4\5\0\12\4\1\75\14\4\46\0" +
                    "\1\76\1\77\41\0\1\100\101\0\1\101\40\0\1\14" +
                    "\64\0\4\4\1\0\4\4\1\102\1\4\5\0\27\4" +
                    "\33\0\4\4\1\0\6\4\5\0\22\4\1\103\4\4" +
                    "\33\0\4\4\1\0\6\4\5\0\4\4\1\104\22\4" +
                    "\33\0\4\4\1\0\6\4\5\0\5\4\1\105\21\4" +
                    "\33\0\4\4\1\0\2\4\1\106\3\4\5\0\12\4" +
                    "\1\107\3\4\1\110\10\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\111\1\4\1\112\6\4\1\113\15\4\33\0" +
                    "\4\4\1\0\6\4\5\0\1\4\1\114\7\4\1\115" +
                    "\1\4\1\116\5\4\1\117\5\4\33\0\4\4\1\0" +
                    "\1\120\5\4\5\0\12\4\1\121\14\4\33\0\4\4" +
                    "\1\0\6\4\5\0\2\4\1\122\2\4\1\123\21\4" +
                    "\33\0\4\4\1\0\6\4\5\0\2\4\1\124\24\4" +
                    "\33\0\4\4\1\0\6\4\5\0\11\4\1\125\15\4" +
                    "\33\0\4\4\1\0\6\4\5\0\2\4\1\126\24\4" +
                    "\33\0\1\3\2\0\1\62\3\0\4\63\12\0\1\62" +
                    "\10\0\1\127\6\0\1\3\1\127\4\0\1\64\25\0" +
                    "\50\130\1\0\1\131\30\130\1\0\1\64\44\0\1\64" +
                    "\5\0\1\132\25\0\51\74\1\133\3\74\1\134\24\74" +
                    "\56\0\1\135\1\136\101\0\1\137\101\0\1\140\1\141" +
                    "\1\0\1\50\10\0\1\56\65\0\1\142\1\0\1\143" +
                    "\76\0\1\51\1\144\101\0\1\145\3\0\1\146\75\0" +
                    "\1\147\101\0\1\150\5\0\1\151\73\0\1\152\100\0" +
                    "\1\57\24\0\1\153\3\0\1\154\40\0\1\153\12\0" +
                    "\1\154\30\0\4\63\67\0\1\64\2\0\1\62\1\0" +
                    "\4\155\14\0\1\62\17\0\1\64\34\0\4\4\1\0" +
                    "\6\4\5\0\2\4\1\156\24\4\33\0\4\4\1\0" +
                    "\6\4\5\0\4\4\1\157\22\4\33\0\4\4\1\0" +
                    "\6\4\5\0\12\4\1\160\14\4\33\0\4\4\1\0" +
                    "\6\4\5\0\10\4\1\161\2\4\1\162\13\4\32\0" +
                    "\16\76\1\163\1\164\62\76\15\165\1\166\64\165\1\0" +
                    "\4\4\1\0\6\4\5\0\1\4\1\167\25\4\33\0" +
                    "\4\4\1\0\6\4\5\0\23\4\1\170\3\4\33\0" +
                    "\4\4\1\0\6\4\5\0\5\4\1\171\21\4\33\0" +
                    "\4\4\1\0\6\4\5\0\1\4\1\172\15\4\1\173" +
                    "\7\4\33\0\4\4\1\0\6\4\5\0\10\4\1\174" +
                    "\16\4\33\0\4\4\1\0\4\4\1\175\1\4\5\0" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\1\4\1\176" +
                    "\25\4\33\0\4\4\1\0\6\4\5\0\10\4\1\177" +
                    "\16\4\33\0\4\4\1\0\6\4\5\0\12\4\1\200" +
                    "\14\4\33\0\4\4\1\0\6\4\5\0\1\201\26\4" +
                    "\33\0\4\4\1\0\6\4\5\0\1\202\3\4\1\203" +
                    "\22\4\33\0\4\4\1\0\6\4\5\0\2\4\1\204" +
                    "\24\4\33\0\4\4\1\0\6\4\5\0\17\4\1\205" +
                    "\1\206\6\4\33\0\4\4\1\0\6\4\5\0\13\4" +
                    "\1\207\13\4\33\0\4\4\1\0\6\4\5\0\1\4" +
                    "\1\210\25\4\33\0\4\4\1\0\4\4\1\211\1\4" +
                    "\5\0\27\4\33\0\4\4\1\0\1\212\5\4\5\0" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\1\4\1\213" +
                    "\25\4\33\0\4\4\1\0\6\4\5\0\13\4\1\214" +
                    "\13\4\33\0\4\4\1\0\2\4\1\215\3\4\5\0" +
                    "\13\4\1\216\13\4\33\0\1\217\1\0\2\217\1\0" +
                    "\2\217\11\0\1\217\2\0\1\217\1\0\1\217\1\0" +
                    "\1\217\4\0\1\217\10\0\1\217\33\0\50\130\1\155" +
                    "\1\131\46\130\2\0\32\130\2\0\26\130\54\0\1\220" +
                    "\25\0\16\74\2\0\32\74\2\0\26\74\57\0\1\221" +
                    "\101\0\1\222\23\0\1\153\4\0\4\155\34\0\1\153" +
                    "\34\0\1\153\44\0\1\153\34\0\4\4\1\0\6\4" +
                    "\5\0\1\223\26\4\33\0\4\4\1\0\6\4\5\0" +
                    "\17\4\1\224\7\4\33\0\4\4\1\0\6\4\5\0" +
                    "\13\4\1\225\13\4\33\0\4\4\1\0\6\4\5\0" +
                    "\2\4\1\226\24\4\50\0\1\163\63\0\15\165\1\227" +
                    "\64\165\14\0\1\163\1\166\65\0\4\4\1\0\6\4" +
                    "\5\0\2\4\1\230\24\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\231\21\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\232\26\4\33\0\4\4\1\0\4\4\1\233" +
                    "\1\4\5\0\27\4\33\0\4\4\1\0\6\4\5\0" +
                    "\13\4\1\234\13\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\235\21\4\33\0\4\4\1\0\6\4\5\0" +
                    "\15\4\1\236\11\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\237\21\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\240\21\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\241\6\4\1\242\16\4\33\0\4\4\1\0" +
                    "\6\4\5\0\4\4\1\243\22\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\4\1\244\25\4\33\0\4\4\1\0" +
                    "\4\4\1\245\1\4\5\0\27\4\33\0\4\4\1\0" +
                    "\6\4\5\0\4\4\1\246\22\4\33\0\4\4\1\0" +
                    "\6\4\5\0\12\4\1\247\14\4\33\0\4\4\1\0" +
                    "\6\4\5\0\5\4\1\250\21\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\4\1\251\25\4\33\0\4\4\1\0" +
                    "\6\4\5\0\3\4\1\252\23\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\253\26\4\33\0\4\4\1\0\6\4" +
                    "\5\0\2\4\1\254\24\4\33\0\4\4\1\0\2\4" +
                    "\1\255\3\4\5\0\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\256\26\4\33\0\4\4\1\0\6\4\5\0" +
                    "\14\4\1\257\12\4\33\0\1\217\1\0\2\217\1\0" +
                    "\2\217\4\63\5\0\1\217\2\0\1\217\1\0\1\217" +
                    "\1\0\1\217\4\0\1\217\10\0\1\217\34\0\4\4" +
                    "\1\0\6\4\5\0\1\4\1\260\25\4\33\0\4\4" +
                    "\1\0\6\4\5\0\17\4\1\261\7\4\33\0\4\4" +
                    "\1\0\6\4\5\0\12\4\1\262\14\4\32\0\14\165" +
                    "\1\163\1\227\64\165\1\0\4\4\1\0\6\4\5\0" +
                    "\14\4\1\263\12\4\33\0\4\4\1\0\6\4\5\0" +
                    "\6\4\1\264\20\4\33\0\4\4\1\0\6\4\5\0" +
                    "\4\4\1\265\22\4\33\0\4\4\1\0\6\4\5\0" +
                    "\10\4\1\266\16\4\33\0\4\4\1\0\6\4\5\0" +
                    "\4\4\1\267\22\4\33\0\4\4\1\0\6\4\5\0" +
                    "\13\4\1\270\13\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\271\25\4\33\0\4\4\1\0\6\4\5\0" +
                    "\13\4\1\272\13\4\33\0\4\4\1\0\6\4\5\0" +
                    "\7\4\1\273\17\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\274\25\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\275\21\4\33\0\4\4\1\0\6\4\5\0" +
                    "\2\4\1\276\24\4\33\0\4\4\1\0\6\4\5\0" +
                    "\7\4\1\277\17\4\33\0\4\4\1\0\2\4\1\300" +
                    "\3\4\5\0\27\4\33\0\4\4\1\0\4\4\1\301" +
                    "\1\4\5\0\27\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\302\21\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\303\25\4\33\0\4\4\1\0\6\4\5\0" +
                    "\12\4\1\304\14\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\305\21\4\33\0\4\4\1\0\6\4\5\0" +
                    "\12\4\1\306\14\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\307\25\4\33\0\4\4\1\0\6\4\5\0" +
                    "\12\4\1\310\14\4\33\0\4\4\1\0\6\4\5\0" +
                    "\12\4\1\311\14\4\33\0\4\4\1\0\6\4\5\0" +
                    "\7\4\1\312\17\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\313\25\4\33\0\4\4\1\0\6\4\5\0" +
                    "\14\4\1\314\12\4\33\0\4\4\1\0\1\315\5\4" +
                    "\5\0\27\4\33\0\4\4\1\0\6\4\5\0\11\4" +
                    "\1\316\15\4\33\0\4\4\1\0\6\4\5\0\5\4" +
                    "\1\317\21\4\33\0\4\4\1\0\2\4\1\320\3\4" +
                    "\5\0\27\4\33\0\4\4\1\0\6\4\5\0\13\4" +
                    "\1\321\13\4\33\0\4\4\1\0\6\4\5\0\5\4" +
                    "\1\322\21\4\33\0\4\4\1\0\1\323\5\4\5\0" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\5\4\1\324" +
                    "\21\4\33\0\4\4\1\0\4\4\1\325\1\4\5\0" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\1\4\1\326" +
                    "\25\4\33\0\4\4\1\0\2\4\1\327\3\4\5\0" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\14\4\1\330" +
                    "\12\4\33\0\4\4\1\0\6\4\5\0\4\4\1\331" +
                    "\22\4\33\0\4\4\1\0\6\4\5\0\5\4\1\332" +
                    "\21\4\33\0\4\4\1\0\6\4\5\0\5\4\1\333" +
                    "\21\4\32\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\11\1\1\11\32\1\4\11\1\1\6\11" +
                    "\1\0\2\1\3\11\3\1\2\0\1\1\2\0\2\11" +
                    "\25\1\5\0\1\11\1\1\3\11\1\1\11\11\1\1" +
                    "\1\0\1\11\5\1\1\11\1\1\2\0\31\1\3\11" +
                    "\4\1\1\0\104\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    ComplexSymbolFactory symbolFactory;
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;
    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;
    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;
    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    public Lexer(java.io.Reader in, ComplexSymbolFactory sf) {
        this(in);
        symbolFactory = sf;
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[219];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[219];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[10032];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    /* user code: */

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[219];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 198) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    private Symbol symbol(int sym) {
        return symbolFactory.newSymbol("sym", sym, new Location(yyline + 1, yycolumn + 1, yychar), new Location(yyline + 1, yycolumn + yylength(), yychar + yylength()));
    }

    //    static TreeSet typeset = new TreeSet();

    private Symbol symbol(int sym, Object val) {
        Location left = new Location(yyline + 1, yycolumn + 1, yychar);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol("sym", sym, left, right, val);
    }

    private Symbol symbol(int sym, Object val, int buflength) {
        Location left = new Location(yyline + 1, yycolumn + yylength() - buflength, yychar + yylength() - buflength);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol("sym", sym, left, right, val);
    }

    private int typecheck(String s) {

        if (Parser.lookupType(s.trim())) {
            return TYPE_NAME;
        } else {
            return IDENTIFIER;
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return symbolFactory.newSymbol("EOF", EOF, new Location(yyline + 1, yycolumn + 1, yychar), new Location(yyline + 1, yycolumn + 1, yychar + 1));
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        System.err.println("Fehler: unbekanntes Zeichen:" + yytext() + " " + (yyline + 1) + "/" + (yycolumn + 1));
                    }
                    case 85:
                        break;
                    case 2: {
                        return symbol(CONSTANT, yytext());
                    }
                    case 86:
                        break;
                    case 3: {
                        return symbol(typecheck(yytext()), yytext());
                    }
                    case 87:
                        break;
                    case 4: {
                        return symbol(MINUS);
                    }
                    case 88:
                        break;
                    case 5: {
                        return symbol(DIVIDE, "/");
                    }
                    case 89:
                        break;
                    case 6: {
                        return symbol(MUL, "*");
                    }
                    case 90:
                        break;
                    case 7: { /* ignore bad characters */
                    }
                    case 91:
                        break;
                    case 8: {
                        return symbol(POINT);
                    }
                    case 92:
                        break;
                    case 9: {
                        return symbol(GREATER, ">");
                    }
                    case 93:
                        break;
                    case 10: {
                        return symbol(ASSIGN);
                    }
                    case 94:
                        break;
                    case 11: {
                        return symbol(LESS, "<");
                    }
                    case 95:
                        break;
                    case 12: {
                        return symbol(PLUS, "+");
                    }
                    case 96:
                        break;
                    case 13: {
                        return symbol(MODULUS, "%");
                    }
                    case 97:
                        break;
                    case 14: {
                        return symbol(ADRESS);
                    }
                    case 98:
                        break;
                    case 15: {
                        return symbol(XOR);
                    }
                    case 99:
                        break;
                    case 16: {
                        return symbol(OR);
                    }
                    case 100:
                        break;
                    case 17: {
                        return symbol(NOT, "!");
                    }
                    case 101:
                        break;
                    case 18: {
                        return symbol(SEMI);
                    }
                    case 102:
                        break;
                    case 19: {
                        return symbol(CURLYL);
                    }
                    case 103:
                        break;
                    case 20: {
                        return symbol(CURLYR);
                    }
                    case 104:
                        break;
                    case 21: {
                        return symbol(COMMA);
                    }
                    case 105:
                        break;
                    case 22: {
                        return symbol(COLON);
                    }
                    case 106:
                        break;
                    case 23: {
                        return symbol(PARAL);
                    }
                    case 107:
                        break;
                    case 24: {
                        return symbol(PARAR);
                    }
                    case 108:
                        break;
                    case 25: {
                        return symbol(SQUAREDL);
                    }
                    case 109:
                        break;
                    case 26: {
                        return symbol(SQUAREDR);
                    }
                    case 110:
                        break;
                    case 27: {
                        return symbol(TILDE);
                    }
                    case 111:
                        break;
                    case 28: {
                        return symbol(COND);
                    }
                    case 112:
                        break;
                    case 29: {
                        return symbol(DEC_OP, "--");
                    }
                    case 113:
                        break;
                    case 30: {
                        return symbol(PTR_OP);
                    }
                    case 114:
                        break;
                    case 31: {
                        return symbol(SUB_ASSIGN);
                    }
                    case 115:
                        break;
                    case 32: {
                        return symbol(DIV_ASSIGN);
                    }
                    case 116:
                        break;
                    case 33: {
                        return symbol(MUL_ASSIGN);
                    }
                    case 117:
                        break;
                    case 34: {
                        return symbol(IF, yytext());
                    }
                    case 118:
                        break;
                    case 35: {
                        return symbol(DO, yytext());
                    }
                    case 119:
                        break;
                    case 36: {
                        return symbol(STRING_LITERAL, yytext());
                    }
                    case 120:
                        break;
                    case 37: {
                        return symbol(RIGHT_OP);
                    }
                    case 121:
                        break;
                    case 38: {
                        return symbol(GE_OP, ">=");
                    }
                    case 122:
                        break;
                    case 39: {
                        return symbol(EQ_OP, "==");
                    }
                    case 123:
                        break;
                    case 40: {
                        return symbol(LE_OP, "<=");
                    }
                    case 124:
                        break;
                    case 41: {
                        return symbol(LEFT_OP);
                    }
                    case 125:
                        break;
                    case 42: {
                        return symbol(ADD_ASSIGN);
                    }
                    case 126:
                        break;
                    case 43: {
                        return symbol(INC_OP, "++");
                    }
                    case 127:
                        break;
                    case 44: {
                        return symbol(MOD_ASSIGN);
                    }
                    case 128:
                        break;
                    case 45: {
                        return symbol(AND_ASSIGN);
                    }
                    case 129:
                        break;
                    case 46: {
                        return symbol(AND_OP, "&&");
                    }
                    case 130:
                        break;
                    case 47: {
                        return symbol(XOR_ASSIGN);
                    }
                    case 131:
                        break;
                    case 48: {
                        return symbol(OR_ASSIGN);
                    }
                    case 132:
                        break;
                    case 49: {
                        return symbol(OR_OP, "||");
                    }
                    case 133:
                        break;
                    case 50: {
                        return symbol(NE_OP, "!=");
                    }
                    case 134:
                        break;
                    case 51: {
                        return symbol(FOR, yytext());
                    }
                    case 135:
                        break;
                    case 52: {
                    }
                    case 136:
                        break;
                    case 53: {
                        return symbol(INT, yytext());
                    }
                    case 137:
                        break;
                    case 54: {
                        return symbol(ELLIPSIS);
                    }
                    case 138:
                        break;
                    case 55: {
                        return symbol(RIGHT_ASSIGN);
                    }
                    case 139:
                        break;
                    case 56: {
                        return symbol(LEFT_ASSIGN);
                    }
                    case 140:
                        break;
                    case 57: {
                        return symbol(LONG, yytext());
                    }
                    case 141:
                        break;
                    case 58: {
                        return symbol(AUTO, yytext());
                    }
                    case 142:
                        break;
                    case 59: {
                        return symbol(ELSE, yytext());
                    }
                    case 143:
                        break;
                    case 60: {
                        return symbol(ENUM, yytext());
                    }
                    case 144:
                        break;
                    case 61: {
                        return symbol(CASE, yytext());
                    }
                    case 145:
                        break;
                    case 62: {
                        return symbol(CHAR, yytext());
                    }
                    case 146:
                        break;
                    case 63: {
                        return symbol(GOTO, yytext());
                    }
                    case 147:
                        break;
                    case 64: {
                        return symbol(VOID, yytext());
                    }
                    case 148:
                        break;
                    case 65: {
                        return symbol(FLOAT, yytext());
                    }
                    case 149:
                        break;
                    case 66: {
                        return symbol(UNION, yytext());
                    }
                    case 150:
                        break;
                    case 67: {
                        return symbol(BREAK, yytext());
                    }
                    case 151:
                        break;
                    case 68: {
                        return symbol(CONST, yytext());
                    }
                    case 152:
                        break;
                    case 69: {
                        return symbol(SHORT, yytext());
                    }
                    case 153:
                        break;
                    case 70: {
                        return symbol(WHILE, yytext());
                    }
                    case 154:
                        break;
                    case 71: {
                        return symbol(RETURN, yytext());
                    }
                    case 155:
                        break;
                    case 72: {
                        return symbol(EXTERN, yytext());
                    }
                    case 156:
                        break;
                    case 73: {
                        return symbol(STATIC, yytext());
                    }
                    case 157:
                        break;
                    case 74: {
                        return symbol(STRUCT, yytext());
                    }
                    case 158:
                        break;
                    case 75: {
                        return symbol(SIGNED, yytext());
                    }
                    case 159:
                        break;
                    case 76: {
                        return symbol(SIZEOF, yytext());
                    }
                    case 160:
                        break;
                    case 77: {
                        return symbol(SWITCH, yytext());
                    }
                    case 161:
                        break;
                    case 78: {
                        return symbol(DOUBLE, yytext());
                    }
                    case 162:
                        break;
                    case 79: {
                        return symbol(TYPEDEF, yytext());
                    }
                    case 163:
                        break;
                    case 80: {
                        return symbol(DEFAULT, yytext());
                    }
                    case 164:
                        break;
                    case 81: {
                        return symbol(UNSIGNED, yytext());
                    }
                    case 165:
                        break;
                    case 82: {
                        return symbol(REGISTER, yytext());
                    }
                    case 166:
                        break;
                    case 83: {
                        return symbol(CONTINUE, yytext());
                    }
                    case 167:
                        break;
                    case 84: {
                        return symbol(VOLATILE, yytext());
                    }
                    case 168:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}

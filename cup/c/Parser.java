//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement.*;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\331\000\002\002\004\000\002\003\003\000\002\003" +
                            "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
                            "\000\002\004\006\000\002\004\005\000\002\004\006\000" +
                            "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
                            "\004\004\000\002\007\003\000\002\007\004\000\002\007" +
                            "\004\000\002\007\004\000\002\007\004\000\002\007\006" +
                            "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
                            "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
                            "\012\003\000\002\012\006\000\002\013\003\000\002\013" +
                            "\005\000\002\013\005\000\002\013\005\000\002\014\003" +
                            "\000\002\014\005\000\002\014\005\000\002\016\003\000" +
                            "\002\016\005\000\002\016\005\000\002\015\003\000\002" +
                            "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
                            "\005\000\002\017\003\000\002\017\005\000\002\017\005" +
                            "\000\002\020\003\000\002\020\005\000\002\021\003\000" +
                            "\002\021\005\000\002\022\003\000\002\022\005\000\002" +
                            "\023\003\000\002\023\005\000\002\024\003\000\002\024" +
                            "\005\000\002\025\003\000\002\025\007\000\002\006\003" +
                            "\000\002\006\005\000\002\075\003\000\002\075\003\000" +
                            "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
                            "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
                            "\003\000\002\075\003\000\002\075\003\000\002\005\003" +
                            "\000\002\005\005\000\002\026\003\000\002\027\004\000" +
                            "\002\077\002\000\002\027\006\000\002\030\003\000\002" +
                            "\030\004\000\002\030\003\000\002\030\004\000\002\030" +
                            "\003\000\002\030\004\000\002\031\003\000\002\031\005" +
                            "\000\002\035\003\000\002\035\005\000\002\032\003\000" +
                            "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
                            "\032\003\000\002\033\003\000\002\033\003\000\002\033" +
                            "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
                            "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
                            "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
                            "\037\007\000\002\037\006\000\002\037\004\000\002\037" +
                            "\007\000\002\037\006\000\002\037\004\000\002\040\003" +
                            "\000\002\040\004\000\002\041\005\000\002\043\004\000" +
                            "\002\043\003\000\002\043\004\000\002\043\003\000\002" +
                            "\044\003\000\002\044\005\000\002\045\003\000\002\045" +
                            "\004\000\002\045\005\000\002\046\006\000\002\046\007" +
                            "\000\002\046\004\000\002\047\003\000\002\047\005\000" +
                            "\002\050\003\000\002\050\005\000\002\034\003\000\002" +
                            "\034\003\000\002\036\004\000\002\036\003\000\002\052" +
                            "\003\000\002\052\005\000\002\052\006\000\002\052\005" +
                            "\000\002\052\006\000\002\052\006\000\002\052\005\000" +
                            "\002\051\003\000\002\051\004\000\002\051\004\000\002" +
                            "\051\005\000\002\055\003\000\002\055\004\000\002\053" +
                            "\003\000\002\053\005\000\002\076\003\000\002\076\005" +
                            "\000\002\056\004\000\002\056\004\000\002\056\003\000" +
                            "\002\054\003\000\002\054\005\000\002\011\003\000\002" +
                            "\011\004\000\002\057\003\000\002\057\003\000\002\057" +
                            "\004\000\002\060\005\000\002\060\004\000\002\060\005" +
                            "\000\002\060\005\000\002\060\006\000\002\060\004\000" +
                            "\002\060\005\000\002\060\005\000\002\060\006\000\002" +
                            "\042\003\000\002\042\005\000\002\042\006\000\002\061" +
                            "\003\000\002\061\005\000\002\062\003\000\002\100\002" +
                            "\000\002\062\004\000\002\062\003\000\002\062\003\000" +
                            "\002\062\003\000\002\062\003\000\002\063\005\000\002" +
                            "\063\006\000\002\063\005\000\002\064\004\000\002\064" +
                            "\005\000\002\064\005\000\002\064\006\000\002\074\003" +
                            "\000\002\074\004\000\002\070\003\000\002\070\004\000" +
                            "\002\071\003\000\002\071\004\000\002\065\007\000\002" +
                            "\065\011\000\002\065\007\000\002\066\007\000\002\066" +
                            "\011\000\002\066\010\000\002\066\011\000\002\067\005" +
                            "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
                            "\002\067\005\000\002\002\003\000\002\002\004\000\002" +
                            "\072\003\000\002\072\003\000\002\101\002\000\002\073" +
                            "\007\000\002\102\002\000\002\073\006\000\002\103\002" +
                            "\000\002\073\006\000\002\104\002\000\002\073\005"});
    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u0167\000\060\004\047\035\014\036\024\037\023\040" +
                            "\021\041\030\042\017\043\010\044\005\045\016\046\042" +
                            "\047\035\050\027\051\040\052\013\053\007\054\043\055" +
                            "\031\056\045\057\033\060\036\104\020\116\026\001\002" +
                            "\000\012\004\047\076\377\104\020\116\026\001\002\000" +
                            "\072\004\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
                            "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
                            "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
                            "\057\uffa4\060\uffa4\076\uffa4\101\uffa4\102\uffa4\104\uffa4\105" +
                            "\uffa4\106\uffa4\116\uffa4\001\002\000\072\004\uff9c\035\uff9c" +
                            "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044" +
                            "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
                            "\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\076" +
                            "\uff9c\101\uff9c\102\uff9c\104\uff9c\105\uff9c\106\uff9c\116\uff9c" +
                            "\001\002\000\072\004\uff81\035\uff81\036\uff81\037\uff81\040" +
                            "\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81" +
                            "\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
                            "\uff81\056\uff81\057\uff81\060\uff81\076\uff81\101\uff81\102\uff81" +
                            "\104\uff81\105\uff81\106\uff81\116\uff81\001\002\000\072\004" +
                            "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
                            "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
                            "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
                            "\060\uffa5\076\uffa5\101\uffa5\102\uffa5\104\uffa5\105\uffa5\106" +
                            "\uffa5\116\uffa5\001\002\000\072\004\uff9d\035\uff9d\036\uff9d" +
                            "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
                            "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d" +
                            "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\076\uff9d\101" +
                            "\uff9d\102\uff9d\104\uff9d\105\uff9d\106\uff9d\116\uff9d\001\002" +
                            "\000\072\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042" +
                            "\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e" +
                            "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
                            "\uff7e\060\uff7e\076\uff7e\077\uff7e\101\uff7e\102\uff7e\103\uff7e" +
                            "\104\215\105\uff7e\106\214\001\002\000\072\004\uffa0\035" +
                            "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
                            "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
                            "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
                            "\076\uffa0\101\uffa0\102\uffa0\104\uffa0\105\uffa0\106\uffa0\116" +
                            "\uffa0\001\002\000\072\004\uff9b\035\uff9b\036\uff9b\037\uff9b" +
                            "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
                            "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
                            "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\076\uff9b\101\uff9b\102" +
                            "\uff9b\104\uff9b\105\uff9b\106\uff9b\116\uff9b\001\002\000\062" +
                            "\002\uff32\004\uff32\035\uff32\036\uff32\037\uff32\040\uff32\041" +
                            "\uff32\042\uff32\043\uff32\044\uff32\045\uff32\046\uff32\047\uff32" +
                            "\050\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056" +
                            "\uff32\057\uff32\060\uff32\104\uff32\116\uff32\001\002\000\072" +
                            "\004\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
                            "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
                            "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
                            "\uffa3\060\uffa3\076\uffa3\101\uffa3\102\uffa3\104\uffa3\105\uffa3" +
                            "\106\uffa3\116\uffa3\001\002\000\070\004\uffa7\035\uffa7\036" +
                            "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
                            "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
                            "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\076\uffa7" +
                            "\101\uffa7\104\uffa7\105\uffa7\106\uffa7\116\uffa7\001\002\000" +
                            "\010\004\047\104\020\116\026\001\002\000\070\004\uffa9" +
                            "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
                            "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
                            "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
                            "\uffa9\076\uffa9\101\uffa9\104\uffa9\105\uffa9\106\uffa9\116\uffa9" +
                            "\001\002\000\006\004\047\104\020\001\002\000\070\004" +
                            "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
                            "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
                            "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
                            "\060\uffaa\076\uffaa\101\uffaa\104\uffaa\105\uffaa\106\uffaa\116" +
                            "\uffaa\001\002\000\070\004\uffab\035\uffab\036\uffab\037\uffab" +
                            "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046" +
                            "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
                            "\055\uffab\056\uffab\057\uffab\060\uffab\076\uffab\101\uffab\104" +
                            "\uffab\105\uffab\106\uffab\116\uffab\001\002\000\070\004\uffb3" +
                            "\035\014\036\024\037\023\040\021\041\030\042\017\043" +
                            "\010\044\005\045\016\046\042\047\035\050\027\051\040" +
                            "\052\013\053\007\054\043\055\031\056\045\057\033\060" +
                            "\036\076\uffb3\101\uffb3\104\uffb3\105\uffb3\106\uffb3\116\uffb3" +
                            "\001\002\000\022\004\uff76\053\007\054\043\101\uff76\104" +
                            "\uff76\105\uff76\106\uff76\116\026\001\002\000\072\004\uff9e" +
                            "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
                            "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
                            "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060" +
                            "\uff9e\076\uff9e\101\uff9e\102\uff9e\104\uff9e\105\uff9e\106\uff9e" +
                            "\116\uff9e\001\002\000\070\004\uffa8\035\uffa8\036\uffa8\037" +
                            "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
                            "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
                            "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\076\uffa8\101\uffa8" +
                            "\104\uffa8\105\uffa8\106\uffa8\116\uffa8\001\002\000\072\004" +
                            "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
                            "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
                            "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
                            "\060\uffa6\076\uffa6\101\uffa6\102\uffa6\104\uffa6\105\uffa6\106" +
                            "\uffa6\116\uffa6\001\002\000\054\035\014\036\024\037\023" +
                            "\040\021\041\030\042\017\043\010\044\005\045\016\046" +
                            "\042\047\035\050\027\051\040\052\013\053\007\054\043" +
                            "\055\031\056\045\057\033\060\036\077\uff2a\001\002\000" +
                            "\006\004\364\077\363\001\002\000\070\004\uffb1\035\014" +
                            "\036\024\037\023\040\021\041\030\042\017\043\010\044" +
                            "\005\045\016\046\042\047\035\050\027\051\040\052\013" +
                            "\053\007\054\043\055\031\056\045\057\033\060\036\076" +
                            "\uffb1\101\uffb1\104\uffb1\105\uffb1\106\uffb1\116\uffb1\001\002" +
                            "\000\072\004\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
                            "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
                            "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
                            "\uff9f\057\uff9f\060\uff9f\076\uff9f\101\uff9f\102\uff9f\104\uff9f" +
                            "\105\uff9f\106\uff9f\116\uff9f\001\002\000\006\004\346\077" +
                            "\345\001\002\000\062\002\uff34\004\uff34\035\uff34\036\uff34" +
                            "\037\uff34\040\uff34\041\uff34\042\uff34\043\uff34\044\uff34\045" +
                            "\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052\uff34\053\uff34" +
                            "\054\uff34\055\uff34\056\uff34\057\uff34\060\uff34\104\uff34\116" +
                            "\uff34\001\002\000\072\004\uffa1\035\uffa1\036\uffa1\037\uffa1" +
                            "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
                            "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
                            "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\076\uffa1\101\uffa1\102" +
                            "\uffa1\104\uffa1\105\uffa1\106\uffa1\116\uffa1\001\002\000\062" +
                            "\002\343\004\047\035\014\036\024\037\023\040\021\041" +
                            "\030\042\017\043\010\044\005\045\016\046\042\047\035" +
                            "\050\027\051\040\052\013\053\007\054\043\055\031\056" +
                            "\045\057\033\060\036\104\020\116\026\001\002\000\072" +
                            "\004\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
                            "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
                            "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057" +
                            "\uffa2\060\uffa2\076\uffa2\101\uffa2\102\uffa2\104\uffa2\105\uffa2" +
                            "\106\uffa2\116\uffa2\001\002\000\072\004\uff80\035\uff80\036" +
                            "\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80" +
                            "\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053" +
                            "\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\076\uff80" +
                            "\101\uff80\102\uff80\104\uff80\105\uff80\106\uff80\116\uff80\001" +
                            "\002\000\062\002\uff31\004\uff31\035\uff31\036\uff31\037\uff31" +
                            "\040\uff31\041\uff31\042\uff31\043\uff31\044\uff31\045\uff31\046" +
                            "\uff31\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31\054\uff31" +
                            "\055\uff31\056\uff31\057\uff31\060\uff31\104\uff31\116\uff31\001" +
                            "\002\000\006\004\052\077\051\001\002\000\070\004\uffb5" +
                            "\035\014\036\024\037\023\040\021\041\030\042\017\043" +
                            "\010\044\005\045\016\046\042\047\035\050\027\051\040" +
                            "\052\013\053\007\054\043\055\031\056\045\057\033\060" +
                            "\036\076\uffb5\101\uffb5\104\uffb5\105\uffb5\106\uffb5\116\uffb5" +
                            "\001\002\000\072\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
                            "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d" +
                            "\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
                            "\uff7d\057\uff7d\060\uff7d\076\uff7d\077\uff7d\101\uff7d\102\uff7d" +
                            "\103\uff7d\104\uff7d\105\uff7d\106\uff7d\001\002\000\020\004" +
                            "\uffb4\076\uffb4\101\uffb4\104\uffb4\105\uffb4\106\uffb4\116\uffb4" +
                            "\001\002\000\040\035\014\043\010\044\005\045\016\046" +
                            "\042\047\035\050\027\051\040\052\013\053\007\054\043" +
                            "\055\031\056\045\057\033\060\036\001\002\000\074\004" +
                            "\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98" +
                            "\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051" +
                            "\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
                            "\060\uff98\076\uff98\077\053\101\uff98\102\uff98\104\uff98\105" +
                            "\uff98\106\uff98\116\uff98\001\002\000\040\035\014\043\010" +
                            "\044\005\045\016\046\042\047\035\050\027\051\040\052" +
                            "\013\053\007\054\043\055\031\056\045\057\033\060\036" +
                            "\001\002\000\054\004\uff90\035\014\043\010\044\005\045" +
                            "\016\046\042\047\035\050\027\051\040\052\013\053\007" +
                            "\054\043\055\031\056\045\057\033\060\036\102\uff90\104" +
                            "\uff90\105\uff90\106\uff90\116\uff90\001\002\000\042\035\014" +
                            "\043\010\044\005\045\016\046\042\047\035\050\027\051" +
                            "\040\052\013\053\007\054\043\055\031\056\045\057\033" +
                            "\060\036\100\336\001\002\000\042\035\uff94\043\uff94\044" +
                            "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
                            "\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\100" +
                            "\uff94\001\002\000\054\004\uff8e\035\014\043\010\044\005" +
                            "\045\016\046\042\047\035\050\027\051\040\052\013\053" +
                            "\007\054\043\055\031\056\045\057\033\060\036\102\uff8e" +
                            "\104\uff8e\105\uff8e\106\uff8e\116\uff8e\001\002\000\012\004" +
                            "\047\102\061\104\020\116\026\001\002\000\034\004\075" +
                            "\005\073\006\104\007\066\011\112\012\123\104\121\111" +
                            "\071\112\074\113\102\114\114\115\070\116\122\001\002" +
                            "\000\006\076\uff8d\101\uff8d\001\002\000\006\076\332\101" +
                            "\331\001\002\000\010\076\uff8b\101\uff8b\102\065\001\002" +
                            "\000\034\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\034\004\075\005\073\006\104\007" +
                            "\066\011\112\012\123\104\326\111\071\112\074\113\102" +
                            "\114\114\115\070\116\122\001\002\000\126\010\ufffc\011" +
                            "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
                            "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026" +
                            "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
                            "\076\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105" +
                            "\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\114\ufffc\115\ufffc" +
                            "\116\ufffc\117\ufffc\120\ufffc\121\ufffc\122\ufffc\123\ufffc\124" +
                            "\ufffc\125\ufffc\001\002\000\034\004\uffec\005\uffec\006\uffec" +
                            "\007\uffec\011\uffec\012\uffec\104\uffec\111\uffec\112\uffec\113" +
                            "\uffec\114\uffec\115\uffec\116\uffec\001\002\000\034\004\uffee" +
                            "\005\uffee\006\uffee\007\uffee\011\uffee\012\uffee\104\uffee\111" +
                            "\uffee\112\uffee\113\uffee\114\uffee\115\uffee\116\uffee\001\002" +
                            "\000\064\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
                            "\uffe6\021\uffe6\022\uffe6\076\uffe6\100\uffe6\101\uffe6\102\uffe6" +
                            "\105\uffe6\107\uffe6\111\uffe6\114\uffe6\115\uffe6\116\uffe6\117" +
                            "\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6" +
                            "\001\002\000\126\010\uffff\011\uffff\012\uffff\013\uffff\014" +
                            "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
                            "\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
                            "\uffff\032\uffff\033\uffff\034\uffff\076\uffff\100\uffff\101\uffff" +
                            "\102\uffff\103\uffff\104\uffff\105\uffff\106\uffff\107\uffff\110" +
                            "\uffff\111\uffff\114\uffff\115\uffff\116\uffff\117\uffff\120\uffff" +
                            "\121\uffff\122\uffff\123\uffff\124\uffff\125\uffff\001\002\000" +
                            "\034\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9" +
                            "\104\uffe9\111\uffe9\112\uffe9\113\uffe9\114\uffe9\115\uffe9\116" +
                            "\uffe9\001\002\000\126\010\000\011\000\012\000\013\000" +
                            "\014\000\015\000\016\000\017\000\020\000\021\000\022" +
                            "\000\023\000\024\000\025\000\026\000\027\000\030\000" +
                            "\031\000\032\000\033\000\034\000\076\000\100\000\101" +
                            "\000\102\000\103\000\104\000\105\000\106\000\107\000" +
                            "\110\000\111\000\114\000\115\000\116\000\117\000\120" +
                            "\000\121\000\122\000\123\000\124\000\125\000\001\002" +
                            "\000\112\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
                            "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
                            "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\076" +
                            "\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\105\uffe8\107\uffe8" +
                            "\111\uffe8\114\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121" +
                            "\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8\001\002\000\032" +
                            "\021\uffd2\022\uffd2\076\uffd2\100\uffd2\101\uffd2\102\uffd2\105" +
                            "\uffd2\107\uffd2\111\261\123\uffd2\124\uffd2\125\uffd2\001\002" +
                            "\000\014\076\uffb9\100\uffb9\101\uffb9\102\uffb9\107\uffb9\001" +
                            "\002\000\052\013\273\014\274\015\uffdc\016\uffdc\017\uffdc" +
                            "\020\uffdc\021\uffdc\022\uffdc\076\uffdc\100\uffdc\101\uffdc\102" +
                            "\uffdc\105\uffdc\107\uffdc\111\uffdc\121\uffdc\122\uffdc\123\uffdc" +
                            "\124\uffdc\125\uffdc\001\002\000\034\004\uffea\005\uffea\006" +
                            "\uffea\007\uffea\011\uffea\012\uffea\104\uffea\111\uffea\112\uffea" +
                            "\113\uffea\114\uffea\115\uffea\116\uffea\001\002\000\126\010" +
                            "\314\011\311\012\313\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
                            "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
                            "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
                            "\034\ufff4\076\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104" +
                            "\315\105\ufff4\106\312\107\ufff4\110\310\111\ufff4\114\ufff4" +
                            "\115\ufff4\116\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123" +
                            "\ufff4\124\ufff4\125\ufff4\001\002\000\126\010\ufffe\011\ufffe" +
                            "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
                            "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
                            "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\076" +
                            "\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe" +
                            "\106\ufffe\107\ufffe\110\ufffe\111\ufffe\114\ufffe\115\ufffe\116" +
                            "\ufffe\117\ufffe\120\ufffe\121\ufffe\122\ufffe\123\ufffe\124\ufffe" +
                            "\125\ufffe\001\002\000\030\021\uffd0\022\uffd0\076\uffd0\100" +
                            "\uffd0\101\uffd0\102\uffd0\105\uffd0\107\uffd0\123\257\124\uffd0" +
                            "\125\uffd0\001\002\000\026\021\uffce\022\uffce\076\uffce\100" +
                            "\uffce\101\uffce\102\uffce\105\uffce\107\uffce\124\255\125\uffce" +
                            "\001\002\000\056\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
                            "\uffdf\020\uffdf\021\uffdf\022\uffdf\076\uffdf\100\uffdf\101\uffdf" +
                            "\102\uffdf\105\uffdf\107\uffdf\111\uffdf\114\277\115\276\121" +
                            "\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf\001\002\000\036" +
                            "\017\263\020\264\021\uffd4\022\uffd4\076\uffd4\100\uffd4\101" +
                            "\uffd4\102\uffd4\105\uffd4\107\uffd4\111\uffd4\123\uffd4\124\uffd4" +
                            "\125\uffd4\001\002\000\024\021\253\022\uffcc\076\uffcc\100" +
                            "\uffcc\101\uffcc\102\uffcc\105\uffcc\107\uffcc\125\uffcc\001\002" +
                            "\000\034\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\104\125\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\046\015\266\016\270\017\uffd7\020" +
                            "\uffd7\021\uffd7\022\uffd7\076\uffd7\100\uffd7\101\uffd7\102\uffd7" +
                            "\105\uffd7\107\uffd7\111\uffd7\121\271\122\267\123\uffd7\124" +
                            "\uffd7\125\uffd7\001\002\000\034\004\uffeb\005\uffeb\006\uffeb" +
                            "\007\uffeb\011\uffeb\012\uffeb\104\uffeb\111\uffeb\112\uffeb\113" +
                            "\uffeb\114\uffeb\115\uffeb\116\uffeb\001\002\000\022\022\245" +
                            "\076\uffca\100\uffca\101\uffca\102\uffca\105\uffca\107\uffca\125" +
                            "\246\001\002\000\006\076\uff89\101\uff89\001\002\000\064" +
                            "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
                            "\uffe2\022\uffe2\076\uffe2\100\uffe2\101\uffe2\102\uffe2\105\uffe2" +
                            "\107\uffe2\111\uffe2\114\uffe2\115\uffe2\116\237\117\240\120" +
                            "\241\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\001\002" +
                            "\000\034\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\072\004\075\005\073\006\104\007" +
                            "\066\011\112\012\123\035\014\043\010\044\005\045\016" +
                            "\046\042\047\035\050\027\051\040\052\013\053\007\054" +
                            "\043\055\031\056\045\057\033\060\036\104\121\111\071" +
                            "\112\074\113\102\114\114\115\070\116\122\001\002\000" +
                            "\034\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed" +
                            "\104\uffed\111\uffed\112\uffed\113\uffed\114\uffed\115\uffed\116" +
                            "\uffed\001\002\000\034\004\075\005\073\006\104\007\066" +
                            "\011\112\012\123\104\125\111\071\112\074\113\102\114" +
                            "\114\115\070\116\122\001\002\000\112\013\ufff2\014\ufff2" +
                            "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
                            "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
                            "\032\ufff2\033\ufff2\034\ufff2\076\ufff2\100\ufff2\101\ufff2\102" +
                            "\ufff2\103\ufff2\105\ufff2\107\ufff2\111\ufff2\114\ufff2\115\ufff2" +
                            "\116\ufff2\117\ufff2\120\ufff2\121\ufff2\122\ufff2\123\ufff2\124" +
                            "\ufff2\125\ufff2\001\002\000\034\004\075\005\073\006\104" +
                            "\007\066\011\112\012\123\104\121\111\071\112\074\113" +
                            "\102\114\114\115\070\116\122\001\002\000\014\076\uffbb" +
                            "\101\uffbb\102\uffbb\105\uffbb\107\uffbb\001\002\000\112\013" +
                            "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
                            "\022\uffe8\023\136\024\142\025\147\026\141\027\140\030" +
                            "\150\031\137\032\143\033\135\034\146\076\uffe8\100\uffe8" +
                            "\101\uffe8\102\uffe8\103\145\105\uffe8\107\uffe8\111\uffe8\114" +
                            "\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8" +
                            "\123\uffe8\124\uffe8\125\uffe8\001\002\000\016\076\uffc8\100" +
                            "\uffc8\101\uffc8\102\uffc8\105\uffc8\107\uffc8\001\002\000\006" +
                            "\101\132\105\133\001\002\000\034\004\075\005\073\006" +
                            "\104\007\066\011\112\012\123\104\121\111\071\112\074" +
                            "\113\102\114\114\115\070\116\122\001\002\000\126\010" +
                            "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
                            "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
                            "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
                            "\034\ufffd\076\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104" +
                            "\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\114\ufffd" +
                            "\115\ufffd\116\ufffd\117\ufffd\120\ufffd\121\ufffd\122\ufffd\123" +
                            "\ufffd\124\ufffd\125\ufffd\001\002\000\014\076\uffba\101\uffba" +
                            "\102\uffba\105\uffba\107\uffba\001\002\000\034\004\uffbd\005" +
                            "\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd\104\uffbd\111\uffbd" +
                            "\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd\001\002\000" +
                            "\034\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5" +
                            "\104\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\115\uffc5\116" +
                            "\uffc5\001\002\000\034\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
                            "\011\uffbf\012\uffbf\104\uffbf\111\uffbf\112\uffbf\113\uffbf\114" +
                            "\uffbf\115\uffbf\116\uffbf\001\002\000\034\004\uffc1\005\uffc1" +
                            "\006\uffc1\007\uffc1\011\uffc1\012\uffc1\104\uffc1\111\uffc1\112" +
                            "\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1\001\002\000\034" +
                            "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\104" +
                            "\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2\116\uffc2" +
                            "\001\002\000\034\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011" +
                            "\uffc4\012\uffc4\104\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4" +
                            "\115\uffc4\116\uffc4\001\002\000\034\004\uffbe\005\uffbe\006" +
                            "\uffbe\007\uffbe\011\uffbe\012\uffbe\104\uffbe\111\uffbe\112\uffbe" +
                            "\113\uffbe\114\uffbe\115\uffbe\116\uffbe\001\002\000\034\004" +
                            "\075\005\073\006\104\007\066\011\112\012\123\104\121" +
                            "\111\071\112\074\113\102\114\114\115\070\116\122\001" +
                            "\002\000\034\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6" +
                            "\012\uffc6\104\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\115" +
                            "\uffc6\116\uffc6\001\002\000\034\004\uffbc\005\uffbc\006\uffbc" +
                            "\007\uffbc\011\uffbc\012\uffbc\104\uffbc\111\uffbc\112\uffbc\113" +
                            "\uffbc\114\uffbc\115\uffbc\116\uffbc\001\002\000\034\004\uffc3" +
                            "\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\104\uffc3\111" +
                            "\uffc3\112\uffc3\113\uffc3\114\uffc3\115\uffc3\116\uffc3\001\002" +
                            "\000\034\004\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012" +
                            "\uffc0\104\uffc0\111\uffc0\112\uffc0\113\uffc0\114\uffc0\115\uffc0" +
                            "\116\uffc0\001\002\000\016\076\uffc7\100\uffc7\101\uffc7\102" +
                            "\uffc7\105\uffc7\107\uffc7\001\002\000\004\105\234\001\002" +
                            "\000\012\104\160\105\uff67\106\156\116\026\001\002\000" +
                            "\004\105\uff66\001\002\000\012\101\uff64\104\205\105\uff64" +
                            "\106\204\001\002\000\036\004\075\005\073\006\104\007" +
                            "\066\011\112\012\123\104\121\107\232\111\071\112\074" +
                            "\113\102\114\114\115\070\116\122\001\002\000\010\104" +
                            "\160\105\uff65\106\156\001\002\000\062\035\014\036\024" +
                            "\037\023\040\021\041\030\042\017\043\010\044\005\045" +
                            "\016\046\042\047\035\050\027\051\040\052\013\053\007" +
                            "\054\043\055\031\056\045\057\033\060\036\104\160\105" +
                            "\162\106\156\116\026\001\002\000\016\004\047\101\uff6a" +
                            "\104\177\105\uff6a\106\156\116\026\001\002\000\012\101" +
                            "\uff5d\104\uff5d\105\uff5d\106\uff5d\001\002\000\004\105\173" +
                            "\001\002\000\004\105\172\001\002\000\006\101\uff6e\105" +
                            "\uff6e\001\002\000\006\101\167\105\uff70\001\002\000\054" +
                            "\035\014\036\024\037\023\040\021\041\030\042\017\043" +
                            "\010\044\005\045\016\046\042\047\035\050\027\051\040" +
                            "\052\013\053\007\054\043\055\031\056\045\057\033\060" +
                            "\036\061\170\001\002\000\004\105\uff6f\001\002\000\006" +
                            "\101\uff6d\105\uff6d\001\002\000\012\101\uff62\104\uff62\105" +
                            "\uff62\106\uff62\001\002\000\012\101\uff5c\104\uff5c\105\uff5c" +
                            "\106\uff5c\001\002\000\014\004\047\101\uff65\104\177\105" +
                            "\uff65\106\156\001\002\000\006\101\uff6b\105\uff6b\001\002" +
                            "\000\006\101\uff6c\105\uff6c\001\002\000\064\004\047\035" +
                            "\014\036\024\037\023\040\021\041\030\042\017\043\010" +
                            "\044\005\045\016\046\042\047\035\050\027\051\040\052" +
                            "\013\053\007\054\043\055\031\056\045\057\033\060\036" +
                            "\104\177\105\162\106\156\116\026\001\002\000\004\105" +
                            "\201\001\002\000\072\035\uff7c\036\uff7c\037\uff7c\040\uff7c" +
                            "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047" +
                            "\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c" +
                            "\056\uff7c\057\uff7c\060\uff7c\076\uff7c\077\uff7c\101\uff7c\102" +
                            "\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\001\002\000\072" +
                            "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
                            "\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f" +
                            "\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060" +
                            "\uff7f\076\uff7f\077\uff7f\101\uff7f\102\uff7f\103\uff7f\104\215" +
                            "\105\uff7f\106\214\001\002\000\012\101\uff63\104\205\105" +
                            "\uff63\106\204\001\002\000\036\004\075\005\073\006\104" +
                            "\007\066\011\112\012\123\104\121\107\212\111\071\112" +
                            "\074\113\102\114\114\115\070\116\122\001\002\000\054" +
                            "\035\014\036\024\037\023\040\021\041\030\042\017\043" +
                            "\010\044\005\045\016\046\042\047\035\050\027\051\040" +
                            "\052\013\053\007\054\043\055\031\056\045\057\033\060" +
                            "\036\105\207\001\002\000\004\105\210\001\002\000\012" +
                            "\101\uff5b\104\uff5b\105\uff5b\106\uff5b\001\002\000\012\101" +
                            "\uff5a\104\uff5a\105\uff5a\106\uff5a\001\002\000\004\107\213" +
                            "\001\002\000\012\101\uff5f\104\uff5f\105\uff5f\106\uff5f\001" +
                            "\002\000\012\101\uff5e\104\uff5e\105\uff5e\106\uff5e\001\002" +
                            "\000\036\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\104\121\107\227\111\071\112\074\113\102\114\114" +
                            "\115\070\116\122\001\002\000\056\004\217\035\014\036" +
                            "\024\037\023\040\021\041\030\042\017\043\010\044\005" +
                            "\045\016\046\042\047\035\050\027\051\040\052\013\053" +
                            "\007\054\043\055\031\056\045\057\033\060\036\105\221" +
                            "\001\002\000\004\105\225\001\002\000\006\101\uff69\105" +
                            "\uff69\001\002\000\006\101\222\105\223\001\002\000\072" +
                            "\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043" +
                            "\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77" +
                            "\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060" +
                            "\uff77\076\uff77\077\uff77\101\uff77\102\uff77\103\uff77\104\uff77" +
                            "\105\uff77\106\uff77\001\002\000\004\004\224\001\002\000" +
                            "\072\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
                            "\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051" +
                            "\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78" +
                            "\060\uff78\076\uff78\077\uff78\101\uff78\102\uff78\103\uff78\104" +
                            "\uff78\105\uff78\106\uff78\001\002\000\006\101\uff68\105\uff68" +
                            "\001\002\000\072\035\uff79\036\uff79\037\uff79\040\uff79\041" +
                            "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79" +
                            "\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056" +
                            "\uff79\057\uff79\060\uff79\076\uff79\077\uff79\101\uff79\102\uff79" +
                            "\103\uff79\104\uff79\105\uff79\106\uff79\001\002\000\004\107" +
                            "\230\001\002\000\072\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
                            "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
                            "\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
                            "\056\uff7a\057\uff7a\060\uff7a\076\uff7a\077\uff7a\101\uff7a\102" +
                            "\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\001\002\000\072" +
                            "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
                            "\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b" +
                            "\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060" +
                            "\uff7b\076\uff7b\077\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b" +
                            "\105\uff7b\106\uff7b\001\002\000\004\107\233\001\002\000" +
                            "\012\101\uff61\104\uff61\105\uff61\106\uff61\001\002\000\012" +
                            "\101\uff60\104\uff60\105\uff60\106\uff60\001\002\000\034\004" +
                            "\075\005\073\006\104\007\066\011\112\012\123\104\121" +
                            "\111\071\112\074\113\102\114\114\115\070\116\122\001" +
                            "\002\000\112\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
                            "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
                            "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
                            "\076\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\105\uffe7\107" +
                            "\uffe7\111\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7" +
                            "\121\uffe7\122\uffe7\123\uffe7\124\uffe7\125\uffe7\001\002\000" +
                            "\112\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
                            "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
                            "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\076\ufff1" +
                            "\100\ufff1\101\ufff1\102\ufff1\103\ufff1\105\ufff1\107\ufff1\111" +
                            "\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1" +
                            "\122\ufff1\123\ufff1\124\ufff1\125\ufff1\001\002\000\034\004" +
                            "\075\005\073\006\104\007\066\011\112\012\123\104\121" +
                            "\111\071\112\074\113\102\114\114\115\070\116\122\001" +
                            "\002\000\034\004\075\005\073\006\104\007\066\011\112" +
                            "\012\123\104\121\111\071\112\074\113\102\114\114\115" +
                            "\070\116\122\001\002\000\034\004\075\005\073\006\104" +
                            "\007\066\011\112\012\123\104\121\111\071\112\074\113" +
                            "\102\114\114\115\070\116\122\001\002\000\064\013\uffe3" +
                            "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
                            "\uffe3\076\uffe3\100\uffe3\101\uffe3\102\uffe3\105\uffe3\107\uffe3" +
                            "\111\uffe3\114\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\121" +
                            "\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\001\002\000\064" +
                            "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
                            "\uffe4\022\uffe4\076\uffe4\100\uffe4\101\uffe4\102\uffe4\105\uffe4" +
                            "\107\uffe4\111\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4\120" +
                            "\uffe4\121\uffe4\122\uffe4\123\uffe4\124\uffe4\125\uffe4\001\002" +
                            "\000\064\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
                            "\uffe5\021\uffe5\022\uffe5\076\uffe5\100\uffe5\101\uffe5\102\uffe5" +
                            "\105\uffe5\107\uffe5\111\uffe5\114\uffe5\115\uffe5\116\uffe5\117" +
                            "\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5" +
                            "\001\002\000\034\004\075\005\073\006\104\007\066\011" +
                            "\112\012\123\104\121\111\071\112\074\113\102\114\114" +
                            "\115\070\116\122\001\002\000\034\004\075\005\073\006" +
                            "\104\007\066\011\112\012\123\104\121\111\071\112\074" +
                            "\113\102\114\114\115\070\116\122\001\002\000\006\101" +
                            "\132\102\250\001\002\000\034\004\075\005\073\006\104" +
                            "\007\066\011\112\012\123\104\121\111\071\112\074\113" +
                            "\102\114\114\115\070\116\122\001\002\000\016\076\uffc9" +
                            "\100\uffc9\101\uffc9\102\uffc9\105\uffc9\107\uffc9\001\002\000" +
                            "\024\021\253\022\uffcb\076\uffcb\100\uffcb\101\uffcb\102\uffcb" +
                            "\105\uffcb\107\uffcb\125\uffcb\001\002\000\034\004\075\005" +
                            "\073\006\104\007\066\011\112\012\123\104\121\111\071" +
                            "\112\074\113\102\114\114\115\070\116\122\001\002\000" +
                            "\026\021\uffcd\022\uffcd\076\uffcd\100\uffcd\101\uffcd\102\uffcd" +
                            "\105\uffcd\107\uffcd\124\255\125\uffcd\001\002\000\034\004" +
                            "\075\005\073\006\104\007\066\011\112\012\123\104\121" +
                            "\111\071\112\074\113\102\114\114\115\070\116\122\001" +
                            "\002\000\030\021\uffcf\022\uffcf\076\uffcf\100\uffcf\101\uffcf" +
                            "\102\uffcf\105\uffcf\107\uffcf\123\257\124\uffcf\125\uffcf\001" +
                            "\002\000\034\004\075\005\073\006\104\007\066\011\112" +
                            "\012\123\104\121\111\071\112\074\113\102\114\114\115" +
                            "\070\116\122\001\002\000\032\021\uffd1\022\uffd1\076\uffd1" +
                            "\100\uffd1\101\uffd1\102\uffd1\105\uffd1\107\uffd1\111\261\123" +
                            "\uffd1\124\uffd1\125\uffd1\001\002\000\034\004\075\005\073" +
                            "\006\104\007\066\011\112\012\123\104\121\111\071\112" +
                            "\074\113\102\114\114\115\070\116\122\001\002\000\036" +
                            "\017\263\020\264\021\uffd3\022\uffd3\076\uffd3\100\uffd3\101" +
                            "\uffd3\102\uffd3\105\uffd3\107\uffd3\111\uffd3\123\uffd3\124\uffd3" +
                            "\125\uffd3\001\002\000\034\004\075\005\073\006\104\007" +
                            "\066\011\112\012\123\104\121\111\071\112\074\113\102" +
                            "\114\114\115\070\116\122\001\002\000\034\004\075\005" +
                            "\073\006\104\007\066\011\112\012\123\104\121\111\071" +
                            "\112\074\113\102\114\114\115\070\116\122\001\002\000" +
                            "\046\015\266\016\270\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
                            "\076\uffd5\100\uffd5\101\uffd5\102\uffd5\105\uffd5\107\uffd5\111" +
                            "\uffd5\121\271\122\267\123\uffd5\124\uffd5\125\uffd5\001\002" +
                            "\000\034\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\034\004\075\005\073\006\104\007" +
                            "\066\011\112\012\123\104\121\111\071\112\074\113\102" +
                            "\114\114\115\070\116\122\001\002\000\034\004\075\005" +
                            "\073\006\104\007\066\011\112\012\123\104\121\111\071" +
                            "\112\074\113\102\114\114\115\070\116\122\001\002\000" +
                            "\034\004\075\005\073\006\104\007\066\011\112\012\123" +
                            "\104\121\111\071\112\074\113\102\114\114\115\070\116" +
                            "\122\001\002\000\052\013\273\014\274\015\uffdb\016\uffdb" +
                            "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\076\uffdb\100\uffdb\101" +
                            "\uffdb\102\uffdb\105\uffdb\107\uffdb\111\uffdb\121\uffdb\122\uffdb" +
                            "\123\uffdb\124\uffdb\125\uffdb\001\002\000\034\004\075\005" +
                            "\073\006\104\007\066\011\112\012\123\104\121\111\071" +
                            "\112\074\113\102\114\114\115\070\116\122\001\002\000" +
                            "\034\004\075\005\073\006\104\007\066\011\112\012\123" +
                            "\104\121\111\071\112\074\113\102\114\114\115\070\116" +
                            "\122\001\002\000\056\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
                            "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\076\uffdd\100\uffdd\101" +
                            "\uffdd\102\uffdd\105\uffdd\107\uffdd\111\uffdd\114\277\115\276" +
                            "\121\uffdd\122\uffdd\123\uffdd\124\uffdd\125\uffdd\001\002\000" +
                            "\034\004\075\005\073\006\104\007\066\011\112\012\123" +
                            "\104\121\111\071\112\074\113\102\114\114\115\070\116" +
                            "\122\001\002\000\034\004\075\005\073\006\104\007\066" +
                            "\011\112\012\123\104\121\111\071\112\074\113\102\114" +
                            "\114\115\070\116\122\001\002\000\064\013\uffe0\014\uffe0" +
                            "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\076" +
                            "\uffe0\100\uffe0\101\uffe0\102\uffe0\105\uffe0\107\uffe0\111\uffe0" +
                            "\114\uffe0\115\uffe0\116\237\117\240\120\241\121\uffe0\122" +
                            "\uffe0\123\uffe0\124\uffe0\125\uffe0\001\002\000\064\013\uffe1" +
                            "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
                            "\uffe1\076\uffe1\100\uffe1\101\uffe1\102\uffe1\105\uffe1\107\uffe1" +
                            "\111\uffe1\114\uffe1\115\uffe1\116\237\117\240\120\241\121" +
                            "\uffe1\122\uffe1\123\uffe1\124\uffe1\125\uffe1\001\002\000\056" +
                            "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
                            "\uffde\022\uffde\076\uffde\100\uffde\101\uffde\102\uffde\105\uffde" +
                            "\107\uffde\111\uffde\114\277\115\276\121\uffde\122\uffde\123" +
                            "\uffde\124\uffde\125\uffde\001\002\000\052\013\273\014\274" +
                            "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\076" +
                            "\uffd8\100\uffd8\101\uffd8\102\uffd8\105\uffd8\107\uffd8\111\uffd8" +
                            "\121\uffd8\122\uffd8\123\uffd8\124\uffd8\125\uffd8\001\002\000" +
                            "\052\013\273\014\274\015\uffda\016\uffda\017\uffda\020\uffda" +
                            "\021\uffda\022\uffda\076\uffda\100\uffda\101\uffda\102\uffda\105" +
                            "\uffda\107\uffda\111\uffda\121\uffda\122\uffda\123\uffda\124\uffda" +
                            "\125\uffda\001\002\000\052\013\273\014\274\015\uffd9\016" +
                            "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\076\uffd9\100\uffd9" +
                            "\101\uffd9\102\uffd9\105\uffd9\107\uffd9\111\uffd9\121\uffd9\122" +
                            "\uffd9\123\uffd9\124\uffd9\125\uffd9\001\002\000\046\015\266" +
                            "\016\270\017\uffd6\020\uffd6\021\uffd6\022\uffd6\076\uffd6\100" +
                            "\uffd6\101\uffd6\102\uffd6\105\uffd6\107\uffd6\111\uffd6\121\271" +
                            "\122\267\123\uffd6\124\uffd6\125\uffd6\001\002\000\112\013" +
                            "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
                            "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
                            "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\076\ufff3\100\ufff3" +
                            "\101\ufff3\102\ufff3\103\ufff3\105\ufff3\107\ufff3\111\ufff3\114" +
                            "\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3" +
                            "\123\ufff3\124\ufff3\125\ufff3\001\002\000\004\004\324\001" +
                            "\002\000\126\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
                            "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
                            "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
                            "\032\ufff6\033\ufff6\034\ufff6\076\ufff6\100\ufff6\101\ufff6\102" +
                            "\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6" +
                            "\111\ufff6\114\ufff6\115\ufff6\116\ufff6\117\ufff6\120\ufff6\121" +
                            "\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6\001\002\000\034" +
                            "\004\075\005\073\006\104\007\066\011\112\012\123\104" +
                            "\121\111\071\112\074\113\102\114\114\115\070\116\122" +
                            "\001\002\000\126\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
                            "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
                            "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
                            "\ufff5\032\ufff5\033\ufff5\034\ufff5\076\ufff5\100\ufff5\101\ufff5" +
                            "\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\110" +
                            "\ufff5\111\ufff5\114\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5" +
                            "\121\ufff5\122\ufff5\123\ufff5\124\ufff5\125\ufff5\001\002\000" +
                            "\004\004\321\001\002\000\036\004\075\005\073\006\104" +
                            "\007\066\011\112\012\123\104\121\105\317\111\071\112" +
                            "\074\113\102\114\114\115\070\116\122\001\002\000\006" +
                            "\101\132\105\320\001\002\000\126\010\ufffa\011\ufffa\012" +
                            "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
                            "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
                            "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\076\ufffa" +
                            "\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa\106" +
                            "\ufffa\107\ufffa\110\ufffa\111\ufffa\114\ufffa\115\ufffa\116\ufffa" +
                            "\117\ufffa\120\ufffa\121\ufffa\122\ufffa\123\ufffa\124\ufffa\125" +
                            "\ufffa\001\002\000\126\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
                            "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
                            "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
                            "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\076\ufff9\100\ufff9\101" +
                            "\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9" +
                            "\110\ufff9\111\ufff9\114\ufff9\115\ufff9\116\ufff9\117\ufff9\120" +
                            "\ufff9\121\ufff9\122\ufff9\123\ufff9\124\ufff9\125\ufff9\001\002" +
                            "\000\126\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
                            "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
                            "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
                            "\ufff7\033\ufff7\034\ufff7\076\ufff7\100\ufff7\101\ufff7\102\ufff7" +
                            "\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7\111" +
                            "\ufff7\114\ufff7\115\ufff7\116\ufff7\117\ufff7\120\ufff7\121\ufff7" +
                            "\122\ufff7\123\ufff7\124\ufff7\125\ufff7\001\002\000\006\101" +
                            "\132\107\323\001\002\000\126\010\ufffb\011\ufffb\012\ufffb" +
                            "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
                            "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
                            "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\076\ufffb\100" +
                            "\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb" +
                            "\107\ufffb\110\ufffb\111\ufffb\114\ufffb\115\ufffb\116\ufffb\117" +
                            "\ufffb\120\ufffb\121\ufffb\122\ufffb\123\ufffb\124\ufffb\125\ufffb" +
                            "\001\002\000\126\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
                            "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
                            "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
                            "\ufff8\032\ufff8\033\ufff8\034\ufff8\076\ufff8\100\ufff8\101\ufff8" +
                            "\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110" +
                            "\ufff8\111\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8" +
                            "\121\ufff8\122\ufff8\123\ufff8\124\ufff8\125\ufff8\001\002\000" +
                            "\112\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
                            "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
                            "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\076\ufff0" +
                            "\100\ufff0\101\ufff0\102\ufff0\103\ufff0\105\ufff0\107\ufff0\111" +
                            "\ufff0\114\ufff0\115\ufff0\116\ufff0\117\ufff0\120\ufff0\121\ufff0" +
                            "\122\ufff0\123\ufff0\124\ufff0\125\ufff0\001\002\000\072\004" +
                            "\075\005\073\006\104\007\066\011\112\012\123\035\014" +
                            "\043\010\044\005\045\016\046\042\047\035\050\027\051" +
                            "\040\052\013\053\007\054\043\055\031\056\045\057\033" +
                            "\060\036\104\121\111\071\112\074\113\102\114\114\115" +
                            "\070\116\122\001\002\000\004\105\330\001\002\000\112" +
                            "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
                            "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
                            "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\076\uffef\100" +
                            "\uffef\101\uffef\102\uffef\103\uffef\105\uffef\107\uffef\111\uffef" +
                            "\114\uffef\115\uffef\116\uffef\117\uffef\120\uffef\121\uffef\122" +
                            "\uffef\123\uffef\124\uffef\125\uffef\001\002\000\012\004\047" +
                            "\102\061\104\020\116\026\001\002\000\042\035\uff92\043" +
                            "\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92" +
                            "\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060" +
                            "\uff92\100\uff92\001\002\000\006\076\uff8c\101\uff8c\001\002" +
                            "\000\006\076\uff8a\101\uff8a\001\002\000\016\004\uff8f\102" +
                            "\uff8f\104\uff8f\105\uff8f\106\uff8f\116\uff8f\001\002\000\072" +
                            "\004\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
                            "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
                            "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057" +
                            "\uff9a\060\uff9a\076\uff9a\101\uff9a\102\uff9a\104\uff9a\105\uff9a" +
                            "\106\uff9a\116\uff9a\001\002\000\042\035\uff93\043\uff93\044" +
                            "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93" +
                            "\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\100" +
                            "\uff93\001\002\000\016\004\uff91\102\uff91\104\uff91\105\uff91" +
                            "\106\uff91\116\uff91\001\002\000\042\035\014\043\010\044" +
                            "\005\045\016\046\042\047\035\050\027\051\040\052\013" +
                            "\053\007\054\043\055\031\056\045\057\033\060\036\100" +
                            "\342\001\002\000\072\004\uff99\035\uff99\036\uff99\037\uff99" +
                            "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
                            "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
                            "\055\uff99\056\uff99\057\uff99\060\uff99\076\uff99\101\uff99\102" +
                            "\uff99\104\uff99\105\uff99\106\uff99\116\uff99\001\002\000\004" +
                            "\002\001\001\002\000\062\002\uff33\004\uff33\035\uff33\036" +
                            "\uff33\037\uff33\040\uff33\041\uff33\042\uff33\043\uff33\044\uff33" +
                            "\045\uff33\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053" +
                            "\uff33\054\uff33\055\uff33\056\uff33\057\uff33\060\uff33\104\uff33" +
                            "\116\uff33\001\002\000\004\004\351\001\002\000\074\004" +
                            "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
                            "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051" +
                            "\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86" +
                            "\060\uff86\076\uff86\077\347\101\uff86\102\uff86\104\uff86\105" +
                            "\uff86\106\uff86\116\uff86\001\002\000\004\004\351\001\002" +
                            "\000\006\100\356\101\355\001\002\000\010\100\uff83\101" +
                            "\uff83\103\353\001\002\000\006\100\uff85\101\uff85\001\002" +
                            "\000\034\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\006\100\uff82\101\uff82\001\002\000" +
                            "\004\004\351\001\002\000\072\004\uff87\035\uff87\036\uff87" +
                            "\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045" +
                            "\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87" +
                            "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\076\uff87\101" +
                            "\uff87\102\uff87\104\uff87\105\uff87\106\uff87\116\uff87\001\002" +
                            "\000\006\100\uff84\101\uff84\001\002\000\006\100\361\101" +
                            "\355\001\002\000\072\004\uff88\035\uff88\036\uff88\037\uff88" +
                            "\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046" +
                            "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
                            "\055\uff88\056\uff88\057\uff88\060\uff88\076\uff88\101\uff88\102" +
                            "\uff88\104\uff88\105\uff88\106\uff88\116\uff88\001\002\000\020" +
                            "\004\uffb0\076\uffb0\101\uffb0\104\uffb0\105\uffb0\106\uffb0\116" +
                            "\uffb0\001\002\000\040\035\014\043\010\044\005\045\016" +
                            "\046\042\047\035\050\027\051\040\052\013\053\007\054" +
                            "\043\055\031\056\045\057\033\060\036\001\002\000\074" +
                            "\004\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
                            "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95" +
                            "\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057" +
                            "\uff95\060\uff95\076\uff95\077\365\101\uff95\102\uff95\104\uff95" +
                            "\105\uff95\106\uff95\116\uff95\001\002\000\040\035\014\043" +
                            "\010\044\005\045\016\046\042\047\035\050\027\051\040" +
                            "\052\013\053\007\054\043\055\031\056\045\057\033\060" +
                            "\036\001\002\000\042\035\014\043\010\044\005\045\016" +
                            "\046\042\047\035\050\027\051\040\052\013\053\007\054" +
                            "\043\055\031\056\045\057\033\060\036\100\367\001\002" +
                            "\000\072\004\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
                            "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
                            "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056" +
                            "\uff97\057\uff97\060\uff97\076\uff97\101\uff97\102\uff97\104\uff97" +
                            "\105\uff97\106\uff97\116\uff97\001\002\000\042\035\014\043" +
                            "\010\044\005\045\016\046\042\047\035\050\027\051\040" +
                            "\052\013\053\007\054\043\055\031\056\045\057\033\060" +
                            "\036\100\371\001\002\000\072\004\uff96\035\uff96\036\uff96" +
                            "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
                            "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
                            "\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\076\uff96\101" +
                            "\uff96\102\uff96\104\uff96\105\uff96\106\uff96\116\uff96\001\002" +
                            "\000\140\004\uff46\005\uff46\006\uff46\007\uff46\011\uff46\012" +
                            "\uff46\035\uff46\036\uff46\037\uff46\040\uff46\041\uff46\042\uff46" +
                            "\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051" +
                            "\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056\uff46\057\uff46" +
                            "\060\uff46\062\uff46\063\uff46\064\uff46\066\uff46\067\uff46\070" +
                            "\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075\uff46\076\uff46" +
                            "\077\uff46\100\uff46\104\uff46\111\uff46\112\uff46\113\uff46\114" +
                            "\uff46\115\uff46\116\uff46\001\002\000\004\077\u0112\001\002" +
                            "\000\054\035\014\036\024\037\023\040\021\041\030\042" +
                            "\017\043\010\044\005\045\016\046\042\047\035\050\027" +
                            "\051\040\052\013\053\007\054\043\055\031\056\045\057" +
                            "\033\060\036\077\uff2c\001\002\000\012\004\047\076\377" +
                            "\104\020\116\026\001\002\000\006\076\uffb7\101\u010c\001" +
                            "\002\000\142\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
                            "\011\uffb8\012\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
                            "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
                            "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
                            "\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8" +
                            "\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075" +
                            "\uffb8\076\uffb8\077\uffb8\100\uffb8\104\uffb8\111\uffb8\112\uffb8" +
                            "\113\uffb8\114\uffb8\115\uffb8\116\uffb8\001\002\000\010\076" +
                            "\uffad\101\uffad\103\u0102\001\002\000\006\076\uffaf\101\uffaf" +
                            "\001\002\000\036\004\075\005\073\006\104\007\066\011" +
                            "\112\012\123\077\u0105\104\121\111\071\112\074\113\102" +
                            "\114\114\115\070\116\122\001\002\000\010\076\uff59\100" +
                            "\uff59\101\uff59\001\002\000\006\076\uffac\101\uffac\001\002" +
                            "\000\036\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\077\u0105\104\121\111\071\112\074\113\102\114\114" +
                            "\115\070\116\122\001\002\000\006\100\u0109\101\u0108\001" +
                            "\002\000\006\100\uff56\101\uff56\001\002\000\040\004\075" +
                            "\005\073\006\104\007\066\011\112\012\123\077\u0105\100" +
                            "\u010a\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\010\076\uff58\100\uff58\101\uff58\001" +
                            "\002\000\010\076\uff57\100\uff57\101\uff57\001\002\000\006" +
                            "\100\uff55\101\uff55\001\002\000\010\004\047\104\020\116" +
                            "\026\001\002\000\004\076\u010e\001\002\000\142\002\uffb6" +
                            "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\012\uffb6\035" +
                            "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
                            "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
                            "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
                            "\062\uffb6\063\uffb6\064\uffb6\066\uffb6\067\uffb6\070\uffb6\071" +
                            "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6" +
                            "\100\uffb6\104\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115" +
                            "\uffb6\116\uffb6\001\002\000\006\076\uffae\101\uffae\001\002" +
                            "\000\140\004\uff45\005\uff45\006\uff45\007\uff45\011\uff45\012" +
                            "\uff45\035\uff45\036\uff45\037\uff45\040\uff45\041\uff45\042\uff45" +
                            "\043\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050\uff45\051" +
                            "\uff45\052\uff45\053\uff45\054\uff45\055\uff45\056\uff45\057\uff45" +
                            "\060\uff45\062\uff45\063\uff45\064\uff45\066\uff45\067\uff45\070" +
                            "\uff45\071\uff45\072\uff45\073\uff45\074\uff45\075\uff45\076\uff45" +
                            "\077\uff45\100\uff45\104\uff45\111\uff45\112\uff45\113\uff45\114" +
                            "\uff45\115\uff45\116\uff45\001\002\000\004\077\u0112\001\002" +
                            "\000\140\004\u0114\005\073\006\104\007\066\011\112\012" +
                            "\123\035\014\036\024\037\023\040\021\041\030\042\017" +
                            "\043\010\044\005\045\016\046\042\047\035\050\027\051" +
                            "\040\052\013\053\007\054\043\055\031\056\045\057\033" +
                            "\060\036\062\u012a\063\u0123\064\u0129\066\u011c\067\u011b\070" +
                            "\u011d\071\u011e\072\u0119\073\u0128\074\u0122\075\u0120\076\u0116" +
                            "\077\uff53\100\u011a\104\121\111\071\112\074\113\102\114" +
                            "\114\115\070\116\122\001\002\000\062\002\uff2b\004\uff2b" +
                            "\035\uff2b\036\uff2b\037\uff2b\040\uff2b\041\uff2b\042\uff2b\043" +
                            "\uff2b\044\uff2b\045\uff2b\046\uff2b\047\uff2b\050\uff2b\051\uff2b" +
                            "\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b\060" +
                            "\uff2b\104\uff2b\116\uff2b\001\002\000\120\010\000\011\000" +
                            "\012\000\013\000\014\000\015\000\016\000\017\000\020" +
                            "\000\021\000\022\000\023\000\024\000\025\000\026\000" +
                            "\027\000\030\000\031\000\032\000\033\000\034\000\076" +
                            "\000\101\000\102\u015b\103\000\104\000\106\000\110\000" +
                            "\111\000\114\000\115\000\116\000\117\000\120\000\121" +
                            "\000\122\000\123\000\124\000\125\000\001\002\000\070" +
                            "\004\u0114\005\073\006\104\007\066\011\112\012\123\062" +
                            "\u012a\063\u0123\064\u0129\066\u011c\067\u011b\070\u011d\071\u011e" +
                            "\072\u0119\073\u0128\074\u0122\075\u0120\076\u0116\077\uff53\100" +
                            "\u015a\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\074\004\uff42\005\uff42\006\uff42\007" +
                            "\uff42\011\uff42\012\uff42\062\uff42\063\uff42\064\uff42\065\uff42" +
                            "\066\uff42\067\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074" +
                            "\uff42\075\uff42\076\uff42\077\uff42\100\uff42\104\uff42\105\uff42" +
                            "\111\uff42\112\uff42\113\uff42\114\uff42\115\uff42\116\uff42\001" +
                            "\002\000\072\004\uff4e\005\uff4e\006\uff4e\007\uff4e\011\uff4e" +
                            "\012\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e\067" +
                            "\uff4e\070\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e\075\uff4e" +
                            "\076\uff4e\077\uff4e\100\uff4e\104\uff4e\111\uff4e\112\uff4e\113" +
                            "\uff4e\114\uff4e\115\uff4e\116\uff4e\001\002\000\004\077\u0112" +
                            "\001\002\000\004\004\u0157\001\002\000\144\002\uff4a\004" +
                            "\uff4a\005\uff4a\006\uff4a\007\uff4a\011\uff4a\012\uff4a\035\uff4a" +
                            "\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\044" +
                            "\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a" +
                            "\053\uff4a\054\uff4a\055\uff4a\056\uff4a\057\uff4a\060\uff4a\062" +
                            "\uff4a\063\uff4a\064\uff4a\065\uff4a\066\uff4a\067\uff4a\070\uff4a" +
                            "\071\uff4a\072\uff4a\073\uff4a\074\uff4a\075\uff4a\076\uff4a\077" +
                            "\uff4a\100\uff4a\104\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a" +
                            "\115\uff4a\116\uff4a\001\002\000\004\104\u0153\001\002\000" +
                            "\004\104\u014f\001\002\000\066\004\u0114\005\073\006\104" +
                            "\007\066\011\112\012\123\062\u012a\063\u0123\064\u0129\066" +
                            "\u011c\067\u011b\070\u011d\071\u011e\072\u0119\073\u0128\074\u0122" +
                            "\075\u0120\076\u0116\077\uff53\104\121\111\071\112\074\113" +
                            "\102\114\114\115\070\116\122\001\002\000\004\104\u0141" +
                            "\001\002\000\072\004\uff4f\005\uff4f\006\uff4f\007\uff4f\011" +
                            "\uff4f\012\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f\066\uff4f" +
                            "\067\uff4f\070\uff4f\071\uff4f\072\uff4f\073\uff4f\074\uff4f\075" +
                            "\uff4f\076\uff4f\077\uff4f\100\uff4f\104\uff4f\111\uff4f\112\uff4f" +
                            "\113\uff4f\114\uff4f\115\uff4f\116\uff4f\001\002\000\036\004" +
                            "\075\005\073\006\104\007\066\011\112\012\123\076\u013e" +
                            "\104\121\111\071\112\074\113\102\114\114\115\070\116" +
                            "\122\001\002\000\072\004\uff51\005\uff51\006\uff51\007\uff51" +
                            "\011\uff51\012\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066" +
                            "\uff51\067\uff51\070\uff51\071\uff51\072\uff51\073\uff51\074\uff51" +
                            "\075\uff51\076\uff51\077\uff51\100\uff51\104\uff51\111\uff51\112" +
                            "\uff51\113\uff51\114\uff51\115\uff51\116\uff51\001\002\000\004" +
                            "\076\u013d\001\002\000\004\102\u013b\001\002\000\140\004" +
                            "\u0114\005\073\006\104\007\066\011\112\012\123\035\014" +
                            "\036\024\037\023\040\021\041\030\042\017\043\010\044" +
                            "\005\045\016\046\042\047\035\050\027\051\040\052\013" +
                            "\053\007\054\043\055\031\056\045\057\033\060\036\062" +
                            "\u012a\063\u0123\064\u0129\066\u011c\067\u011b\070\u011d\071\u011e" +
                            "\072\u0119\073\u0128\074\u0122\075\u0120\076\u0116\077\uff53\100" +
                            "\u0138\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\006\076\u0136\101\132\001\002\000" +
                            "\072\004\uff50\005\uff50\006\uff50\007\uff50\011\uff50\012\uff50" +
                            "\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50\067\uff50\070" +
                            "\uff50\071\uff50\072\uff50\073\uff50\074\uff50\075\uff50\076\uff50" +
                            "\077\uff50\100\uff50\104\uff50\111\uff50\112\uff50\113\uff50\114" +
                            "\uff50\115\uff50\116\uff50\001\002\000\072\004\uff54\005\uff54" +
                            "\006\uff54\007\uff54\011\uff54\012\uff54\062\uff54\063\uff54\064" +
                            "\uff54\065\uff54\066\uff54\067\uff54\070\uff54\071\uff54\072\uff54" +
                            "\073\uff54\074\uff54\075\uff54\076\uff54\077\uff54\100\uff54\104" +
                            "\uff54\111\uff54\112\uff54\113\uff54\114\uff54\115\uff54\116\uff54" +
                            "\001\002\000\004\076\u0135\001\002\000\004\104\u012f\001" +
                            "\002\000\034\004\075\005\073\006\104\007\066\011\112" +
                            "\012\123\104\121\111\071\112\074\113\102\114\114\115" +
                            "\070\116\122\001\002\000\070\004\uff44\005\uff44\006\uff44" +
                            "\007\uff44\011\uff44\012\uff44\062\uff44\063\uff44\064\uff44\066" +
                            "\uff44\067\uff44\070\uff44\071\uff44\072\uff44\073\uff44\074\uff44" +
                            "\075\uff44\076\uff44\077\uff44\100\uff44\104\uff44\111\uff44\112" +
                            "\uff44\113\uff44\114\uff44\115\uff44\116\uff44\001\002\000\004" +
                            "\102\u012d\001\002\000\066\004\u0114\005\073\006\104\007" +
                            "\066\011\112\012\123\062\u012a\063\u0123\064\u0129\066\u011c" +
                            "\067\u011b\070\u011d\071\u011e\072\u0119\073\u0128\074\u0122\075" +
                            "\u0120\076\u0116\077\uff53\104\121\111\071\112\074\113\102" +
                            "\114\114\115\070\116\122\001\002\000\072\004\uff4c\005" +
                            "\uff4c\006\uff4c\007\uff4c\011\uff4c\012\uff4c\062\uff4c\063\uff4c" +
                            "\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072" +
                            "\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c\077\uff4c\100\uff4c" +
                            "\104\uff4c\111\uff4c\112\uff4c\113\uff4c\114\uff4c\115\uff4c\116" +
                            "\uff4c\001\002\000\034\004\075\005\073\006\104\007\066" +
                            "\011\112\012\123\104\121\111\071\112\074\113\102\114" +
                            "\114\115\070\116\122\001\002\000\006\101\132\105\u0131" +
                            "\001\002\000\066\004\u0114\005\073\006\104\007\066\011" +
                            "\112\012\123\062\u012a\063\u0123\064\u0129\066\u011c\067\u011b" +
                            "\070\u011d\071\u011e\072\u0119\073\u0128\074\u0122\075\u0120\076" +
                            "\u0116\077\uff53\104\121\111\071\112\074\113\102\114\114" +
                            "\115\070\116\122\001\002\000\072\004\uff40\005\uff40\006" +
                            "\uff40\007\uff40\011\uff40\012\uff40\062\uff40\063\uff40\064\uff40" +
                            "\065\u0133\066\uff40\067\uff40\070\uff40\071\uff40\072\uff40\073" +
                            "\uff40\074\uff40\075\uff40\076\uff40\077\uff40\100\uff40\104\uff40" +
                            "\111\uff40\112\uff40\113\uff40\114\uff40\115\uff40\116\uff40\001" +
                            "\002\000\066\004\u0114\005\073\006\104\007\066\011\112" +
                            "\012\123\062\u012a\063\u0123\064\u0129\066\u011c\067\u011b\070" +
                            "\u011d\071\u011e\072\u0119\073\u0128\074\u0122\075\u0120\076\u0116" +
                            "\077\uff53\104\121\111\071\112\074\113\102\114\114\115" +
                            "\070\116\122\001\002\000\072\004\uff3f\005\uff3f\006\uff3f" +
                            "\007\uff3f\011\uff3f\012\uff3f\062\uff3f\063\uff3f\064\uff3f\065" +
                            "\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\073\uff3f" +
                            "\074\uff3f\075\uff3f\076\uff3f\077\uff3f\100\uff3f\104\uff3f\111" +
                            "\uff3f\112\uff3f\113\uff3f\114\uff3f\115\uff3f\116\uff3f\001\002" +
                            "\000\072\004\uff38\005\uff38\006\uff38\007\uff38\011\uff38\012" +
                            "\uff38\062\uff38\063\uff38\064\uff38\065\uff38\066\uff38\067\uff38" +
                            "\070\uff38\071\uff38\072\uff38\073\uff38\074\uff38\075\uff38\076" +
                            "\uff38\077\uff38\100\uff38\104\uff38\111\uff38\112\uff38\113\uff38" +
                            "\114\uff38\115\uff38\116\uff38\001\002\000\074\004\uff41\005" +
                            "\uff41\006\uff41\007\uff41\011\uff41\012\uff41\062\uff41\063\uff41" +
                            "\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41\072" +
                            "\uff41\073\uff41\074\uff41\075\uff41\076\uff41\077\uff41\100\uff41" +
                            "\104\uff41\105\uff41\111\uff41\112\uff41\113\uff41\114\uff41\115" +
                            "\uff41\116\uff41\001\002\000\070\004\u0114\005\073\006\104" +
                            "\007\066\011\112\012\123\062\u012a\063\u0123\064\u0129\066" +
                            "\u011c\067\u011b\070\u011d\071\u011e\072\u0119\073\u0128\074\u0122" +
                            "\075\u0120\076\u0116\077\uff53\100\u0139\104\121\111\071\112" +
                            "\074\113\102\114\114\115\070\116\122\001\002\000\144" +
                            "\002\uff48\004\uff48\005\uff48\006\uff48\007\uff48\011\uff48\012" +
                            "\uff48\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042\uff48" +
                            "\043\uff48\044\uff48\045\uff48\046\uff48\047\uff48\050\uff48\051" +
                            "\uff48\052\uff48\053\uff48\054\uff48\055\uff48\056\uff48\057\uff48" +
                            "\060\uff48\062\uff48\063\uff48\064\uff48\065\uff48\066\uff48\067" +
                            "\uff48\070\uff48\071\uff48\072\uff48\073\uff48\074\uff48\075\uff48" +
                            "\076\uff48\077\uff48\100\uff48\104\uff48\111\uff48\112\uff48\113" +
                            "\uff48\114\uff48\115\uff48\116\uff48\001\002\000\144\002\uff47" +
                            "\004\uff47\005\uff47\006\uff47\007\uff47\011\uff47\012\uff47\035" +
                            "\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043\uff47" +
                            "\044\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47\052" +
                            "\uff47\053\uff47\054\uff47\055\uff47\056\uff47\057\uff47\060\uff47" +
                            "\062\uff47\063\uff47\064\uff47\065\uff47\066\uff47\067\uff47\070" +
                            "\uff47\071\uff47\072\uff47\073\uff47\074\uff47\075\uff47\076\uff47" +
                            "\077\uff47\100\uff47\104\uff47\111\uff47\112\uff47\113\uff47\114" +
                            "\uff47\115\uff47\116\uff47\001\002\000\070\004\uff43\005\uff43" +
                            "\006\uff43\007\uff43\011\uff43\012\uff43\062\uff43\063\uff43\064" +
                            "\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43" +
                            "\074\uff43\075\uff43\076\uff43\077\uff43\100\uff43\104\uff43\111" +
                            "\uff43\112\uff43\113\uff43\114\uff43\115\uff43\116\uff43\001\002" +
                            "\000\066\004\u0114\005\073\006\104\007\066\011\112\012" +
                            "\123\062\u012a\063\u0123\064\u0129\066\u011c\067\u011b\070\u011d" +
                            "\071\u011e\072\u0119\073\u0128\074\u0122\075\u0120\076\u0116\077" +
                            "\uff53\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\072\004\uff4b\005\uff4b\006\uff4b\007" +
                            "\uff4b\011\uff4b\012\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b" +
                            "\066\uff4b\067\uff4b\070\uff4b\071\uff4b\072\uff4b\073\uff4b\074" +
                            "\uff4b\075\uff4b\076\uff4b\077\uff4b\100\uff4b\104\uff4b\111\uff4b" +
                            "\112\uff4b\113\uff4b\114\uff4b\115\uff4b\116\uff4b\001\002\000" +
                            "\072\004\uff37\005\uff37\006\uff37\007\uff37\011\uff37\012\uff37" +
                            "\062\uff37\063\uff37\064\uff37\065\uff37\066\uff37\067\uff37\070" +
                            "\uff37\071\uff37\072\uff37\073\uff37\074\uff37\075\uff37\076\uff37" +
                            "\077\uff37\100\uff37\104\uff37\111\uff37\112\uff37\113\uff37\114" +
                            "\uff37\115\uff37\116\uff37\001\002\000\072\004\uff36\005\uff36" +
                            "\006\uff36\007\uff36\011\uff36\012\uff36\062\uff36\063\uff36\064" +
                            "\uff36\065\uff36\066\uff36\067\uff36\070\uff36\071\uff36\072\uff36" +
                            "\073\uff36\074\uff36\075\uff36\076\uff36\077\uff36\100\uff36\104" +
                            "\uff36\111\uff36\112\uff36\113\uff36\114\uff36\115\uff36\116\uff36" +
                            "\001\002\000\006\076\u0140\101\132\001\002\000\072\004" +
                            "\uff35\005\uff35\006\uff35\007\uff35\011\uff35\012\uff35\062\uff35" +
                            "\063\uff35\064\uff35\065\uff35\066\uff35\067\uff35\070\uff35\071" +
                            "\uff35\072\uff35\073\uff35\074\uff35\075\uff35\076\uff35\077\uff35" +
                            "\100\uff35\104\uff35\111\uff35\112\uff35\113\uff35\114\uff35\115" +
                            "\uff35\116\uff35\001\002\000\036\004\075\005\073\006\104" +
                            "\007\066\011\112\012\123\076\u0116\104\121\111\071\112" +
                            "\074\113\102\114\114\115\070\116\122\001\002\000\036" +
                            "\004\075\005\073\006\104\007\066\011\112\012\123\076" +
                            "\u0116\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\036\004\075\005\073\006\104\007" +
                            "\066\011\112\012\123\104\121\105\u0145\111\071\112\074" +
                            "\113\102\114\114\115\070\116\122\001\002\000\006\101" +
                            "\132\105\u0147\001\002\000\066\004\u0114\005\073\006\104" +
                            "\007\066\011\112\012\123\062\u012a\063\u0123\064\u0129\066" +
                            "\u011c\067\u011b\070\u011d\071\u011e\072\u0119\073\u0128\074\u0122" +
                            "\075\u0120\076\u0116\077\uff53\104\121\111\071\112\074\113" +
                            "\102\114\114\115\070\116\122\001\002\000\072\004\uff3b" +
                            "\005\uff3b\006\uff3b\007\uff3b\011\uff3b\012\uff3b\062\uff3b\063" +
                            "\uff3b\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b" +
                            "\072\uff3b\073\uff3b\074\uff3b\075\uff3b\076\uff3b\077\uff3b\100" +
                            "\uff3b\104\uff3b\111\uff3b\112\uff3b\113\uff3b\114\uff3b\115\uff3b" +
                            "\116\uff3b\001\002\000\066\004\u0114\005\073\006\104\007" +
                            "\066\011\112\012\123\062\u012a\063\u0123\064\u0129\066\u011c" +
                            "\067\u011b\070\u011d\071\u011e\072\u0119\073\u0128\074\u0122\075" +
                            "\u0120\076\u0116\077\uff53\104\121\111\071\112\074\113\102" +
                            "\114\114\115\070\116\122\001\002\000\072\004\uff3a\005" +
                            "\uff3a\006\uff3a\007\uff3a\011\uff3a\012\uff3a\062\uff3a\063\uff3a" +
                            "\064\uff3a\065\uff3a\066\uff3a\067\uff3a\070\uff3a\071\uff3a\072" +
                            "\uff3a\073\uff3a\074\uff3a\075\uff3a\076\uff3a\077\uff3a\100\uff3a" +
                            "\104\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116" +
                            "\uff3a\001\002\000\004\067\u014a\001\002\000\004\104\u014b" +
                            "\001\002\000\034\004\075\005\073\006\104\007\066\011" +
                            "\112\012\123\104\121\111\071\112\074\113\102\114\114" +
                            "\115\070\116\122\001\002\000\006\101\132\105\u014d\001" +
                            "\002\000\004\076\u014e\001\002\000\072\004\uff3c\005\uff3c" +
                            "\006\uff3c\007\uff3c\011\uff3c\012\uff3c\062\uff3c\063\uff3c\064" +
                            "\uff3c\065\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c\072\uff3c" +
                            "\073\uff3c\074\uff3c\075\uff3c\076\uff3c\077\uff3c\100\uff3c\104" +
                            "\uff3c\111\uff3c\112\uff3c\113\uff3c\114\uff3c\115\uff3c\116\uff3c" +
                            "\001\002\000\034\004\075\005\073\006\104\007\066\011" +
                            "\112\012\123\104\121\111\071\112\074\113\102\114\114" +
                            "\115\070\116\122\001\002\000\006\101\132\105\u0151\001" +
                            "\002\000\066\004\u0114\005\073\006\104\007\066\011\112" +
                            "\012\123\062\u012a\063\u0123\064\u0129\066\u011c\067\u011b\070" +
                            "\u011d\071\u011e\072\u0119\073\u0128\074\u0122\075\u0120\076\u0116" +
                            "\077\uff53\104\121\111\071\112\074\113\102\114\114\115" +
                            "\070\116\122\001\002\000\072\004\uff3e\005\uff3e\006\uff3e" +
                            "\007\uff3e\011\uff3e\012\uff3e\062\uff3e\063\uff3e\064\uff3e\065" +
                            "\uff3e\066\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e\073\uff3e" +
                            "\074\uff3e\075\uff3e\076\uff3e\077\uff3e\100\uff3e\104\uff3e\111" +
                            "\uff3e\112\uff3e\113\uff3e\114\uff3e\115\uff3e\116\uff3e\001\002" +
                            "\000\034\004\075\005\073\006\104\007\066\011\112\012" +
                            "\123\104\121\111\071\112\074\113\102\114\114\115\070" +
                            "\116\122\001\002\000\006\101\132\105\u0155\001\002\000" +
                            "\066\004\u0114\005\073\006\104\007\066\011\112\012\123" +
                            "\062\u012a\063\u0123\064\u0129\066\u011c\067\u011b\070\u011d\071" +
                            "\u011e\072\u0119\073\u0128\074\u0122\075\u0120\076\u0116\077\uff53" +
                            "\104\121\111\071\112\074\113\102\114\114\115\070\116" +
                            "\122\001\002\000\072\004\uff3d\005\uff3d\006\uff3d\007\uff3d" +
                            "\011\uff3d\012\uff3d\062\uff3d\063\uff3d\064\uff3d\065\uff3d\066" +
                            "\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\073\uff3d\074\uff3d" +
                            "\075\uff3d\076\uff3d\077\uff3d\100\uff3d\104\uff3d\111\uff3d\112" +
                            "\uff3d\113\uff3d\114\uff3d\115\uff3d\116\uff3d\001\002\000\004" +
                            "\076\u0158\001\002\000\072\004\uff39\005\uff39\006\uff39\007" +
                            "\uff39\011\uff39\012\uff39\062\uff39\063\uff39\064\uff39\065\uff39" +
                            "\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39\074" +
                            "\uff39\075\uff39\076\uff39\077\uff39\100\uff39\104\uff39\111\uff39" +
                            "\112\uff39\113\uff39\114\uff39\115\uff39\116\uff39\001\002\000" +
                            "\072\004\uff52\005\uff52\006\uff52\007\uff52\011\uff52\012\uff52" +
                            "\062\uff52\063\uff52\064\uff52\065\uff52\066\uff52\067\uff52\070" +
                            "\uff52\071\uff52\072\uff52\073\uff52\074\uff52\075\uff52\076\uff52" +
                            "\077\uff52\100\uff52\104\uff52\111\uff52\112\uff52\113\uff52\114" +
                            "\uff52\115\uff52\116\uff52\001\002\000\144\002\uff49\004\uff49" +
                            "\005\uff49\006\uff49\007\uff49\011\uff49\012\uff49\035\uff49\036" +
                            "\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49\044\uff49" +
                            "\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49\053" +
                            "\uff49\054\uff49\055\uff49\056\uff49\057\uff49\060\uff49\062\uff49" +
                            "\063\uff49\064\uff49\065\uff49\066\uff49\067\uff49\070\uff49\071" +
                            "\uff49\072\uff49\073\uff49\074\uff49\075\uff49\076\uff49\077\uff49" +
                            "\100\uff49\104\uff49\111\uff49\112\uff49\113\uff49\114\uff49\115" +
                            "\uff49\116\uff49\001\002\000\066\004\u0114\005\073\006\104" +
                            "\007\066\011\112\012\123\062\u012a\063\u0123\064\u0129\066" +
                            "\u011c\067\u011b\070\u011d\071\u011e\072\u0119\073\u0128\074\u0122" +
                            "\075\u0120\076\u0116\077\uff53\104\121\111\071\112\074\113" +
                            "\102\114\114\115\070\116\122\001\002\000\072\004\uff4d" +
                            "\005\uff4d\006\uff4d\007\uff4d\011\uff4d\012\uff4d\062\uff4d\063" +
                            "\uff4d\064\uff4d\065\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d" +
                            "\072\uff4d\073\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d\100" +
                            "\uff4d\104\uff4d\111\uff4d\112\uff4d\113\uff4d\114\uff4d\115\uff4d" +
                            "\116\uff4d\001\002\000\062\002\uff29\004\uff29\035\uff29\036" +
                            "\uff29\037\uff29\040\uff29\041\uff29\042\uff29\043\uff29\044\uff29" +
                            "\045\uff29\046\uff29\047\uff29\050\uff29\051\uff29\052\uff29\053" +
                            "\uff29\054\uff29\055\uff29\056\uff29\057\uff29\060\uff29\104\uff29" +
                            "\116\uff29\001\002\000\022\004\uff72\053\uff72\054\uff72\101" +
                            "\uff72\104\uff72\105\uff72\106\uff72\116\uff72\001\002\000\022" +
                            "\004\uff75\053\007\054\043\101\uff75\104\uff75\105\uff75\106" +
                            "\uff75\116\026\001\002\000\014\004\uff74\101\uff74\104\uff74" +
                            "\105\uff74\106\uff74\001\002\000\022\004\uff71\053\uff71\054" +
                            "\uff71\101\uff71\104\uff71\105\uff71\106\uff71\116\uff71\001\002" +
                            "\000\014\004\uff73\101\uff73\104\uff73\105\uff73\106\uff73\001" +
                            "\002\000\020\004\uffb2\076\uffb2\101\uffb2\104\uffb2\105\uffb2" +
                            "\106\uffb2\116\uffb2\001\002\000\062\035\014\036\024\037" +
                            "\023\040\021\041\030\042\017\043\010\044\005\045\016" +
                            "\046\042\047\035\050\027\051\040\052\013\053\007\054" +
                            "\043\055\031\056\045\057\033\060\036\076\uffad\077\uff2e" +
                            "\101\uffad\103\u0102\001\002\000\004\077\u0112\001\002\000" +
                            "\054\035\014\036\024\037\023\040\021\041\030\042\017" +
                            "\043\010\044\005\045\016\046\042\047\035\050\027\051" +
                            "\040\052\013\053\007\054\043\055\031\056\045\057\033" +
                            "\060\036\077\uff30\001\002\000\004\077\u0112\001\002\000" +
                            "\062\002\uff2f\004\uff2f\035\uff2f\036\uff2f\037\uff2f\040\uff2f" +
                            "\041\uff2f\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f\047" +
                            "\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055\uff2f" +
                            "\056\uff2f\057\uff2f\060\uff2f\104\uff2f\116\uff2f\001\002\000" +
                            "\062\002\uff2d\004\uff2d\035\uff2d\036\uff2d\037\uff2d\040\uff2d" +
                            "\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045\uff2d\046\uff2d\047" +
                            "\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d" +
                            "\056\uff2d\057\uff2d\060\uff2d\104\uff2d\116\uff2d\001\002"});
    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u0167\000\034\002\040\027\043\030\003\032\045\033" +
                            "\024\034\033\036\031\037\010\046\005\051\021\052\011" +
                            "\072\036\073\014\001\001\000\014\031\375\035\u0100\036" +
                            "\u0163\051\021\052\011\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\010\036\177\051\021\052\011\001\001\000\002\001\001" +
                            "\000\004\052\201\001\001\000\002\001\001\000\002\001" +
                            "\001\000\016\030\u0162\032\045\033\024\034\033\037\010" +
                            "\046\005\001\001\000\010\034\u015d\051\u015f\055\u015e\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\024\027\371\030\374\032\045\033\024\034\033\037" +
                            "\010\046\005\074\373\104\372\001\001\000\002\001\001" +
                            "\000\016\030\361\032\045\033\024\034\033\037\010\046" +
                            "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\032\027\043\030\003\032" +
                            "\045\033\024\034\033\036\031\037\010\046\005\051\021" +
                            "\052\011\072\343\073\014\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
                            "\030\047\032\045\033\024\034\033\037\010\046\005\001" +
                            "\001\000\002\001\001\000\002\001\001\000\020\033\053" +
                            "\034\056\037\010\040\340\041\055\043\057\046\005\001" +
                            "\001\000\002\001\001\000\020\033\053\034\056\037\010" +
                            "\040\054\041\055\043\057\046\005\001\001\000\014\033" +
                            "\053\034\056\037\010\043\337\046\005\001\001\000\016" +
                            "\033\053\034\056\037\010\041\336\043\057\046\005\001" +
                            "\001\000\002\001\001\000\014\033\053\034\056\037\010" +
                            "\043\334\046\005\001\001\000\014\036\063\044\062\045" +
                            "\061\051\021\052\011\001\001\000\044\003\066\004\102" +
                            "\007\075\010\117\012\071\013\116\014\106\015\112\016" +
                            "\100\017\107\020\076\021\104\022\105\023\110\024\114" +
                            "\025\077\026\333\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\044\003\066\004\102\007\075" +
                            "\010\117\012\071\013\116\014\106\015\112\016\100\017" +
                            "\107\020\076\021\104\022\105\023\110\024\114\025\077" +
                            "\026\115\001\001\000\012\003\066\004\102\007\324\010" +
                            "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\012\003\066\004\102\007\306\010\117\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\014\003\066\004\102" +
                            "\007\075\010\117\012\235\001\001\000\062\003\066\004" +
                            "\102\005\130\006\125\007\126\010\117\011\151\012\071" +
                            "\013\116\014\106\015\112\016\100\017\107\020\076\021" +
                            "\104\022\105\023\110\024\114\025\127\033\053\034\056" +
                            "\037\010\043\152\046\005\001\001\000\002\001\001\000" +
                            "\012\003\066\004\102\007\123\010\117\001\001\000\002" +
                            "\001\001\000\046\003\066\004\102\005\130\006\125\007" +
                            "\126\010\117\012\071\013\116\014\106\015\112\016\100" +
                            "\017\107\020\076\021\104\022\105\023\110\024\114\025" +
                            "\127\001\001\000\002\001\001\000\004\075\143\001\001" +
                            "\000\002\001\001\000\002\001\001\000\044\003\066\004" +
                            "\102\006\133\007\126\010\117\012\071\013\116\014\106" +
                            "\015\112\016\100\017\107\020\076\021\104\022\105\023" +
                            "\110\024\114\025\127\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\044\003\066\004\102\006\150\007" +
                            "\126\010\117\012\071\013\116\014\106\015\112\016\100" +
                            "\017\107\020\076\021\104\022\105\023\110\024\114\025" +
                            "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\010\051\156\057\153\060\154\001\001\000\002" +
                            "\001\001\000\002\001\001\000\044\003\066\004\102\007" +
                            "\075\010\117\012\071\013\116\014\106\015\112\016\100" +
                            "\017\107\020\076\021\104\022\105\023\110\024\114\025" +
                            "\077\026\230\001\001\000\004\060\202\001\001\000\032" +
                            "\030\160\032\045\033\024\034\033\037\010\046\005\051" +
                            "\156\053\162\056\164\057\163\060\154\076\165\001\001" +
                            "\000\014\036\175\051\173\052\011\057\174\060\154\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\020\030\160\032" +
                            "\045\033\024\034\033\037\010\046\005\056\170\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\052\201\060\202\001\001\000\002" +
                            "\001\001\000\002\001\001\000\036\030\160\032\045\033" +
                            "\024\034\033\036\177\037\010\046\005\051\173\052\011" +
                            "\053\162\056\164\057\163\060\154\076\165\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\044\003\066\004\102\007\075\010\117\012" +
                            "\071\013\116\014\106\015\112\016\100\017\107\020\076" +
                            "\021\104\022\105\023\110\024\114\025\077\026\210\001" +
                            "\001\000\024\030\160\032\045\033\024\034\033\037\010" +
                            "\046\005\053\205\056\164\076\165\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\044\003\066\004" +
                            "\102\007\075\010\117\012\071\013\116\014\106\015\112" +
                            "\016\100\017\107\020\076\021\104\022\105\023\110\024" +
                            "\114\025\077\026\225\001\001\000\026\030\160\032\045" +
                            "\033\024\034\033\037\010\046\005\053\215\054\217\056" +
                            "\164\076\165\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\014\003\066" +
                            "\004\102\007\075\010\117\012\234\001\001\000\002\001" +
                            "\001\000\002\001\001\000\014\003\066\004\102\007\075" +
                            "\010\117\012\243\001\001\000\014\003\066\004\102\007" +
                            "\075\010\117\012\242\001\001\000\014\003\066\004\102" +
                            "\007\075\010\117\012\241\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\036\003\066\004\102" +
                            "\007\075\010\117\012\071\013\116\014\106\015\112\016" +
                            "\100\017\107\020\076\021\104\022\105\023\251\001\001" +
                            "\000\046\003\066\004\102\005\246\006\125\007\126\010" +
                            "\117\012\071\013\116\014\106\015\112\016\100\017\107" +
                            "\020\076\021\104\022\105\023\110\024\114\025\127\001" +
                            "\001\000\002\001\001\000\042\003\066\004\102\007\075" +
                            "\010\117\012\071\013\116\014\106\015\112\016\100\017" +
                            "\107\020\076\021\104\022\105\023\110\024\114\025\250" +
                            "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
                            "\066\004\102\007\075\010\117\012\071\013\116\014\106" +
                            "\015\112\016\100\017\107\020\076\021\104\022\253\001" +
                            "\001\000\002\001\001\000\032\003\066\004\102\007\075" +
                            "\010\117\012\071\013\116\014\106\015\112\016\100\017" +
                            "\107\020\076\021\255\001\001\000\002\001\001\000\030" +
                            "\003\066\004\102\007\075\010\117\012\071\013\116\014" +
                            "\106\015\112\016\100\017\107\020\257\001\001\000\002" +
                            "\001\001\000\026\003\066\004\102\007\075\010\117\012" +
                            "\071\013\116\014\106\015\112\016\100\017\261\001\001" +
                            "\000\002\001\001\000\024\003\066\004\102\007\075\010" +
                            "\117\012\071\013\116\014\106\015\305\016\100\001\001" +
                            "\000\024\003\066\004\102\007\075\010\117\012\071\013" +
                            "\116\014\106\015\264\016\100\001\001\000\002\001\001" +
                            "\000\022\003\066\004\102\007\075\010\117\012\071\013" +
                            "\116\014\106\016\304\001\001\000\022\003\066\004\102" +
                            "\007\075\010\117\012\071\013\116\014\106\016\303\001" +
                            "\001\000\022\003\066\004\102\007\075\010\117\012\071" +
                            "\013\116\014\106\016\302\001\001\000\022\003\066\004" +
                            "\102\007\075\010\117\012\071\013\116\014\106\016\271" +
                            "\001\001\000\002\001\001\000\020\003\066\004\102\007" +
                            "\075\010\117\012\071\013\116\014\301\001\001\000\020" +
                            "\003\066\004\102\007\075\010\117\012\071\013\116\014" +
                            "\274\001\001\000\002\001\001\000\016\003\066\004\102" +
                            "\007\075\010\117\012\071\013\300\001\001\000\016\003" +
                            "\066\004\102\007\075\010\117\012\071\013\277\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\046\003\066\004\102\005\321\006\125\007\126" +
                            "\010\117\012\071\013\116\014\106\015\112\016\100\017" +
                            "\107\020\076\021\104\022\105\023\110\024\114\025\127" +
                            "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
                            "\066\004\102\005\315\006\125\007\126\010\117\012\071" +
                            "\013\116\014\106\015\112\016\100\017\107\020\076\021" +
                            "\104\022\105\023\110\024\114\025\127\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\062\003\066\004\102\005\130\006" +
                            "\125\007\126\010\117\011\326\012\071\013\116\014\106" +
                            "\015\112\016\100\017\107\020\076\021\104\022\105\023" +
                            "\110\024\114\025\127\033\053\034\056\037\010\043\152" +
                            "\046\005\001\001\000\002\001\001\000\002\001\001\000" +
                            "\012\036\063\045\332\051\021\052\011\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\016\033\053\034\056\037\010\041\336\043\057\046" +
                            "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\006\047\357\050\351\001\001\000\002\001" +
                            "\001\000\006\047\347\050\351\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\044\003\066\004" +
                            "\102\007\075\010\117\012\071\013\116\014\106\015\112" +
                            "\016\100\017\107\020\076\021\104\022\105\023\110\024" +
                            "\114\025\077\026\353\001\001\000\002\001\001\000\004" +
                            "\050\356\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
                            "\033\053\034\056\037\010\040\367\041\055\043\057\046" +
                            "\005\001\001\000\002\001\001\000\020\033\053\034\056" +
                            "\037\010\040\365\041\055\043\057\046\005\001\001\000" +
                            "\016\033\053\034\056\037\010\041\336\043\057\046\005" +
                            "\001\001\000\002\001\001\000\016\033\053\034\056\037" +
                            "\010\041\336\043\057\046\005\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\064\u015c\001\001\000\022\027" +
                            "\u010f\030\374\032\045\033\024\034\033\037\010\046\005" +
                            "\103\u0110\001\001\000\014\031\375\035\u0100\036\377\051" +
                            "\021\052\011\001\001\000\004\077\u010c\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
                            "\066\004\102\006\u0102\007\126\010\117\012\071\013\116" +
                            "\014\106\015\112\016\100\017\107\020\076\021\104\022" +
                            "\105\023\110\024\114\025\127\042\u0103\001\001\000\002" +
                            "\001\001\000\002\001\001\000\050\003\066\004\102\006" +
                            "\u0102\007\126\010\117\012\071\013\116\014\106\015\112" +
                            "\016\100\017\107\020\076\021\104\022\105\023\110\024" +
                            "\114\025\127\042\u0106\061\u0105\001\001\000\002\001\001" +
                            "\000\002\001\001\000\046\003\066\004\102\006\u0102\007" +
                            "\126\010\117\012\071\013\116\014\106\015\112\016\100" +
                            "\017\107\020\076\021\104\022\105\023\110\024\114\025" +
                            "\127\042\u010a\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\012\035\u010e\036\377\051\021\052" +
                            "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\064\u0112\001\001\000" +
                            "\106\003\066\004\102\005\u0124\006\125\007\126\010\117" +
                            "\012\071\013\116\014\106\015\112\016\100\017\107\020" +
                            "\076\021\104\022\105\023\110\024\114\025\127\027\371" +
                            "\030\374\032\045\033\024\034\033\037\010\046\005\062" +
                            "\u012a\063\u0126\065\u0125\066\u011e\067\u0116\070\u0114\071\u0120" +
                            "\074\u0123\100\u0117\001\001\000\002\001\001\000\002\001" +
                            "\001\000\064\003\066\004\102\005\u0124\006\125\007\126" +
                            "\010\117\012\071\013\116\014\106\015\112\016\100\017" +
                            "\107\020\076\021\104\022\105\023\110\024\114\025\127" +
                            "\062\u0139\063\u0126\065\u0125\066\u011e\067\u0116\071\u0120\100" +
                            "\u0117\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\064\u0158\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\064\003\066\004\102" +
                            "\005\u0124\006\125\007\126\010\117\012\071\013\116\014" +
                            "\106\015\112\016\100\017\107\020\076\021\104\022\105" +
                            "\023\110\024\114\025\127\062\u0148\063\u0126\065\u0125\066" +
                            "\u011e\067\u0116\071\u0120\100\u0117\001\001\000\002\001\001" +
                            "\000\002\001\001\000\046\003\066\004\102\005\u013e\006" +
                            "\125\007\126\010\117\012\071\013\116\014\106\015\112" +
                            "\016\100\017\107\020\076\021\104\022\105\023\110\024" +
                            "\114\025\127\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\104\003\066\004\102\005\u0124\006" +
                            "\125\007\126\010\117\012\071\013\116\014\106\015\112" +
                            "\016\100\017\107\020\076\021\104\022\105\023\110\024" +
                            "\114\025\127\027\u010f\030\374\032\045\033\024\034\033" +
                            "\037\010\046\005\062\u012a\063\u0126\065\u0125\066\u011e\067" +
                            "\u0116\070\u0136\071\u0120\100\u0117\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\044\003\066\004\102\007\075\010\117" +
                            "\012\071\013\116\014\106\015\112\016\100\017\107\020" +
                            "\076\021\104\022\105\023\110\024\114\025\077\026\u012b" +
                            "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
                            "\066\004\102\005\u0124\006\125\007\126\010\117\012\071" +
                            "\013\116\014\106\015\112\016\100\017\107\020\076\021" +
                            "\104\022\105\023\110\024\114\025\127\062\u012d\063\u0126" +
                            "\065\u0125\066\u011e\067\u0116\071\u0120\100\u0117\001\001\000" +
                            "\002\001\001\000\046\003\066\004\102\005\u012f\006\125" +
                            "\007\126\010\117\012\071\013\116\014\106\015\112\016" +
                            "\100\017\107\020\076\021\104\022\105\023\110\024\114" +
                            "\025\127\001\001\000\002\001\001\000\064\003\066\004" +
                            "\102\005\u0124\006\125\007\126\010\117\012\071\013\116" +
                            "\014\106\015\112\016\100\017\107\020\076\021\104\022" +
                            "\105\023\110\024\114\025\127\062\u0131\063\u0126\065\u0125" +
                            "\066\u011e\067\u0116\071\u0120\100\u0117\001\001\000\002\001" +
                            "\001\000\064\003\066\004\102\005\u0124\006\125\007\126" +
                            "\010\117\012\071\013\116\014\106\015\112\016\100\017" +
                            "\107\020\076\021\104\022\105\023\110\024\114\025\127" +
                            "\062\u0133\063\u0126\065\u0125\066\u011e\067\u0116\071\u0120\100" +
                            "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\064\003\066\004\102\005\u0124\006\125\007" +
                            "\126\010\117\012\071\013\116\014\106\015\112\016\100" +
                            "\017\107\020\076\021\104\022\105\023\110\024\114\025" +
                            "\127\062\u0139\063\u0126\065\u0125\066\u011e\067\u0116\071\u0120" +
                            "\100\u0117\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\064\003\066\004\102\005\u0124\006\125" +
                            "\007\126\010\117\012\071\013\116\014\106\015\112\016" +
                            "\100\017\107\020\076\021\104\022\105\023\110\024\114" +
                            "\025\127\062\u013b\063\u0126\065\u0125\066\u011e\067\u0116\071" +
                            "\u0120\100\u0117\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\050\003\066\004\102\005\u0124\006\125\007\126\010\117" +
                            "\012\071\013\116\014\106\015\112\016\100\017\107\020" +
                            "\076\021\104\022\105\023\110\024\114\025\127\071\u0141" +
                            "\001\001\000\050\003\066\004\102\005\u0124\006\125\007" +
                            "\126\010\117\012\071\013\116\014\106\015\112\016\100" +
                            "\017\107\020\076\021\104\022\105\023\110\024\114\025" +
                            "\127\071\u0142\001\001\000\046\003\066\004\102\005\u0143" +
                            "\006\125\007\126\010\117\012\071\013\116\014\106\015" +
                            "\112\016\100\017\107\020\076\021\104\022\105\023\110" +
                            "\024\114\025\127\001\001\000\002\001\001\000\064\003" +
                            "\066\004\102\005\u0124\006\125\007\126\010\117\012\071" +
                            "\013\116\014\106\015\112\016\100\017\107\020\076\021" +
                            "\104\022\105\023\110\024\114\025\127\062\u0145\063\u0126" +
                            "\065\u0125\066\u011e\067\u0116\071\u0120\100\u0117\001\001\000" +
                            "\002\001\001\000\064\003\066\004\102\005\u0124\006\125" +
                            "\007\126\010\117\012\071\013\116\014\106\015\112\016" +
                            "\100\017\107\020\076\021\104\022\105\023\110\024\114" +
                            "\025\127\062\u0147\063\u0126\065\u0125\066\u011e\067\u0116\071" +
                            "\u0120\100\u0117\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\046\003\066\004\102\005\u014b\006" +
                            "\125\007\126\010\117\012\071\013\116\014\106\015\112" +
                            "\016\100\017\107\020\076\021\104\022\105\023\110\024" +
                            "\114\025\127\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\046\003\066\004\102\005\u014f\006" +
                            "\125\007\126\010\117\012\071\013\116\014\106\015\112" +
                            "\016\100\017\107\020\076\021\104\022\105\023\110\024" +
                            "\114\025\127\001\001\000\002\001\001\000\064\003\066" +
                            "\004\102\005\u0124\006\125\007\126\010\117\012\071\013" +
                            "\116\014\106\015\112\016\100\017\107\020\076\021\104" +
                            "\022\105\023\110\024\114\025\127\062\u0151\063\u0126\065" +
                            "\u0125\066\u011e\067\u0116\071\u0120\100\u0117\001\001\000\002" +
                            "\001\001\000\046\003\066\004\102\005\u0153\006\125\007" +
                            "\126\010\117\012\071\013\116\014\106\015\112\016\100" +
                            "\017\107\020\076\021\104\022\105\023\110\024\114\025" +
                            "\127\001\001\000\002\001\001\000\064\003\066\004\102" +
                            "\005\u0124\006\125\007\126\010\117\012\071\013\116\014" +
                            "\106\015\112\016\100\017\107\020\076\021\104\022\105" +
                            "\023\110\024\114\025\127\062\u0155\063\u0126\065\u0125\066" +
                            "\u011e\067\u0116\071\u0120\100\u0117\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\064\003\066\004\102\005\u0124\006\125" +
                            "\007\126\010\117\012\071\013\116\014\106\015\112\016" +
                            "\100\017\107\020\076\021\104\022\105\023\110\024\114" +
                            "\025\127\062\u015b\063\u0126\065\u0125\066\u011e\067\u0116\071" +
                            "\u0120\100\u0117\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\034\u0160\051\u0161\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\024\027\371\030\374\032\045\033\024\034" +
                            "\033\037\010\046\005\074\u0165\102\u0164\001\001\000\004" +
                            "\064\u0168\001\001\000\022\027\u010f\030\374\032\045\033" +
                            "\024\034\033\037\010\046\005\101\u0166\001\001\000\004" +
                            "\064\u0167\001\001\000\002\001\001\000\002\001\001"});
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex, sf);
    }

    public static void newScope() {
        typenames.push(new HashSet<String>());
    }

    public static void deleteScope() {
        typenames.pop();
    }

    public static boolean lookupType(String name) {
        for (HashSet<String> scope : typenames)
            if (scope.contains(name)) return true;
        return false;
    }

    public static void addType(String name) {
        typenames.peek().add(name);
    }

    public static void main(String args[]) {
        try {
            ComplexSymbolFactory csf = new ComplexSymbolFactory();
            // create a buffering scanner wrapper
            ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])), csf));
            // start parsing
            Parser p = new Parser(lexer, csf);
            System.out.println("Parser runs: ");
            newScope();
            XMLElement e = (XMLElement) p.parse().value;
            // create XML output file
            XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
            XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
            // dump XML output to the file
            XMLElement.dump(lexer, sw, e); //,"expr","stmt");
            // transform the parse tree into an AST and a rendered HTML version
            Transformer transformer = TransformerFactory.newInstance()
                    .newTransformer(new StreamSource(new File("tree.xsl")));
            Source text = new StreamSource(new File(args[1]));
            transformer.transform(text, new StreamResult(new File("output.html")));

            System.out.println("Parsing finished!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public void syntax_error(Symbol cur_token) {
        System.err.println("Syntax error at " + cur_token);
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= translation_unit EOF
                {
                    XMLElement RESULT;
                    Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location EOF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location EOF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object EOF1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("_START", 0, (XMLElement) start_val);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // primary_expression ::= IDENTIFIER
                {
                    XMLElement RESULT;
                    Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ident = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("primary_expression", 0, new XMLElement.Terminal(identxleft, "ident", ident, identxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // primary_expression ::= CONSTANT
                {
                    XMLElement RESULT;
                    Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object constant = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("primary_expression", 1, new XMLElement.Terminal(constantxleft, "constant", constant, constantxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // primary_expression ::= STRING_LITERAL
                {
                    XMLElement RESULT;
                    Location stringliteralxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location stringliteralxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object stringliteral = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("primary_expression", 2, new XMLElement.Terminal(stringliteralxleft, "stringliteral", stringliteral, stringliteralxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // primary_expression ::= PARAL expression PARAR
                {
                    XMLElement RESULT;
                    Location PARAL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location PARAL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object PARAL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("primary_expression", 3, (XMLElement) e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // postfix_expression ::= primary_expression
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 0, (XMLElement) pe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // postfix_expression ::= postfix_expression SQUAREDL expression SQUAREDR
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location SQUAREDL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location SQUAREDL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object SQUAREDL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location indexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location indexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object index = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SQUAREDR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SQUAREDR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SQUAREDR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 1, (XMLElement) pe, (XMLElement) index);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // postfix_expression ::= postfix_expression PARAL PARAR
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 2, (XMLElement) pe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // postfix_expression ::= postfix_expression PARAL expression PARAR
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 3, (XMLElement) pe, (XMLElement) e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // postfix_expression ::= postfix_expression POINT IDENTIFIER
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location POINT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location POINT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object POINT1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 4, (XMLElement) pe, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // postfix_expression ::= postfix_expression PTR_OP IDENTIFIER
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PTR_OP1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PTR_OP1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PTR_OP1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 5, (XMLElement) pe, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // postfix_expression ::= postfix_expression INC_OP
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 6, (XMLElement) pe, new XMLElement.Terminal(opxleft, "op", op, opxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // postfix_expression ::= postfix_expression DEC_OP
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("postfix_expression", 7, (XMLElement) pe, new XMLElement.Terminal(opxleft, "op", op, opxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // unary_expression ::= postfix_expression
                {
                    XMLElement RESULT;
                    Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object pe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_expression", 0, (XMLElement) pe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // unary_expression ::= INC_OP unary_expression
                {
                    XMLElement RESULT;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ue = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_expression", 1, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) ue);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // unary_expression ::= DEC_OP unary_expression
                {
                    XMLElement RESULT;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ue = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_expression", 2, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) ue);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // unary_expression ::= unary_operator cast_expression
                {
                    XMLElement RESULT;
                    Location uoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location uoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object uo = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_expression", 3, (XMLElement) uo, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // unary_expression ::= SIZEOF unary_expression
                {
                    XMLElement RESULT;
                    Location SIZEOF0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location SIZEOF0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object SIZEOF0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ue = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_expression", 4, (XMLElement) ue);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // unary_expression ::= SIZEOF PARAL type_name PARAR
                {
                    XMLElement RESULT;
                    Location SIZEOF0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location SIZEOF0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object SIZEOF0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object tn = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_expression", 5, (XMLElement) tn);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // unary_operator ::= ADRESS
                {
                    XMLElement RESULT;
                    Location ADRESS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ADRESS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ADRESS0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_operator", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // unary_operator ::= MUL
                {
                    XMLElement RESULT;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_operator", 1, new XMLElement.Terminal(opxleft, "op", op, opxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // unary_operator ::= PLUS
                {
                    XMLElement RESULT;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_operator", 2, new XMLElement.Terminal(opxleft, "op", op, opxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // unary_operator ::= MINUS
                {
                    XMLElement RESULT;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_operator", 3, new XMLElement.Terminal(opxleft, "op", op, opxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // unary_operator ::= TILDE
                {
                    XMLElement RESULT;
                    Location TILDE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location TILDE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object TILDE0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_operator", 4);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // unary_operator ::= NOT
                {
                    XMLElement RESULT;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("unary_operator", 5, new XMLElement.Terminal(opxleft, "op", op, opxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // cast_expression ::= unary_expression
                {
                    XMLElement RESULT;
                    Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ue = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("cast_expression", 0, (XMLElement) ue);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // cast_expression ::= PARAL type_name PARAR cast_expression
                {
                    XMLElement RESULT;
                    Location PARAL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location PARAL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object PARAL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object tn = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("cast_expression", 1, (XMLElement) tn, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // multiplicative_expression ::= cast_expression
                {
                    XMLElement RESULT;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("multiplicative_expression", 0, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // multiplicative_expression ::= multiplicative_expression MUL cast_expression
                {
                    XMLElement RESULT;
                    Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object me = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("multiplicative_expression", 1, (XMLElement) me, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression
                {
                    XMLElement RESULT;
                    Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object me = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("multiplicative_expression", 2, (XMLElement) me, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // multiplicative_expression ::= multiplicative_expression MODULUS cast_expression
                {
                    XMLElement RESULT;
                    Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object me = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("multiplicative_expression", 3, (XMLElement) me, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // additive_expression ::= multiplicative_expression
                {
                    XMLElement RESULT;
                    Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object me = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("additive_expression", 0, (XMLElement) me);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // additive_expression ::= additive_expression PLUS multiplicative_expression
                {
                    XMLElement RESULT;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object me = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("additive_expression", 1, (XMLElement) ae, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) me);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // additive_expression ::= additive_expression MINUS multiplicative_expression
                {
                    XMLElement RESULT;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object me = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("additive_expression", 2, (XMLElement) ae, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) me);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // shift_expression ::= additive_expression
                {
                    XMLElement RESULT;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("shift_expression", 0, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // shift_expression ::= shift_expression LEFT_OP additive_expression
                {
                    XMLElement RESULT;
                    Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object se = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location LEFT_OP1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location LEFT_OP1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object LEFT_OP1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("shift_expression", 1, (XMLElement) se, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // shift_expression ::= shift_expression RIGHT_OP additive_expression
                {
                    XMLElement RESULT;
                    Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object se = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location RIGHT_OP1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location RIGHT_OP1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object RIGHT_OP1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("shift_expression", 2, (XMLElement) se, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // relational_expression ::= shift_expression
                {
                    XMLElement RESULT;
                    Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object se = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("relational_expression", 0, (XMLElement) se);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // relational_expression ::= relational_expression LESS shift_expression
                {
                    XMLElement RESULT;
                    Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object re = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object se = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("relational_expression", 1, (XMLElement) re, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) se);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // relational_expression ::= relational_expression GREATER shift_expression
                {
                    XMLElement RESULT;
                    Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object re = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object se = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("relational_expression", 2, (XMLElement) re, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) se);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // relational_expression ::= relational_expression LE_OP shift_expression
                {
                    XMLElement RESULT;
                    Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object re = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object se = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("relational_expression", 3, (XMLElement) re, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) se);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // relational_expression ::= relational_expression GE_OP shift_expression
                {
                    XMLElement RESULT;
                    Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object re = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object se = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("relational_expression", 4, (XMLElement) re, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) se);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // equality_expression ::= relational_expression
                {
                    XMLElement RESULT;
                    Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object re = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("equality_expression", 0, (XMLElement) re);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // equality_expression ::= equality_expression EQ_OP relational_expression
                {
                    XMLElement RESULT;
                    Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ee = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object re = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("equality_expression", 1, (XMLElement) ee, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) re);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // equality_expression ::= equality_expression NE_OP relational_expression
                {
                    XMLElement RESULT;
                    Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ee = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object re = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("equality_expression", 2, (XMLElement) ee, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) re);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // and_expression ::= equality_expression
                {
                    XMLElement RESULT;
                    Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ee = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("and_expression", 0, (XMLElement) ee);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // and_expression ::= and_expression ADRESS equality_expression
                {
                    XMLElement RESULT;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ADRESS1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ADRESS1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ADRESS1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ee = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("and_expression", 1, (XMLElement) ae, (XMLElement) ee);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // exclusive_or_expression ::= and_expression
                {
                    XMLElement RESULT;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("exclusive_or_expression", 0, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression
                {
                    XMLElement RESULT;
                    Location eoexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location eoexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object eoe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location XOR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location XOR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object XOR1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("exclusive_or_expression", 1, (XMLElement) eoe, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // inclusive_or_expression ::= exclusive_or_expression
                {
                    XMLElement RESULT;
                    Location eoexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location eoexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object eoe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("inclusive_or_expression", 0, (XMLElement) eoe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression
                {
                    XMLElement RESULT;
                    Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ioe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location OR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location OR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object OR1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location eoexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location eoexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object eoe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("inclusive_or_expression", 1, (XMLElement) ioe, (XMLElement) eoe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // logical_and_expression ::= inclusive_or_expression
                {
                    XMLElement RESULT;
                    Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ioe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("logical_and_expression", 0, (XMLElement) ioe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression
                {
                    XMLElement RESULT;
                    Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object lae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ioe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("logical_and_expression", 1, (XMLElement) lae, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) ioe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // logical_or_expression ::= logical_and_expression
                {
                    XMLElement RESULT;
                    Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object lae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("logical_or_expression", 0, (XMLElement) lae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression
                {
                    XMLElement RESULT;
                    Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object loe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object op = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object lae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("logical_or_expression", 1, (XMLElement) loe, new XMLElement.Terminal(opxleft, "op", op, opxright), (XMLElement) lae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // conditional_expression ::= logical_or_expression
                {
                    XMLElement RESULT;
                    Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object loe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("conditional_expression", 0, (XMLElement) loe);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // conditional_expression ::= logical_or_expression COND expression COLON conditional_expression
                {
                    XMLElement RESULT;
                    Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object loe = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location COND1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location COND1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object COND1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COLON3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COLON3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COLON3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("conditional_expression", 1, (XMLElement) loe, (XMLElement) e, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // assignment_expression ::= conditional_expression
                {
                    XMLElement RESULT;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_expression", 0, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // assignment_expression ::= unary_expression assignment_operator assignment_expression
                {
                    XMLElement RESULT;
                    Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ue = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object aop = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_expression", 1, (XMLElement) ue, (XMLElement) aop, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // assignment_operator ::= ASSIGN
                {
                    XMLElement RESULT;
                    Location ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // assignment_operator ::= MUL_ASSIGN
                {
                    XMLElement RESULT;
                    Location MUL_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location MUL_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object MUL_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 1);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // assignment_operator ::= DIV_ASSIGN
                {
                    XMLElement RESULT;
                    Location DIV_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location DIV_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object DIV_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // assignment_operator ::= MOD_ASSIGN
                {
                    XMLElement RESULT;
                    Location MOD_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location MOD_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object MOD_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 3);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // assignment_operator ::= ADD_ASSIGN
                {
                    XMLElement RESULT;
                    Location ADD_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ADD_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ADD_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 4);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // assignment_operator ::= SUB_ASSIGN
                {
                    XMLElement RESULT;
                    Location SUB_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SUB_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SUB_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 5);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // assignment_operator ::= LEFT_ASSIGN
                {
                    XMLElement RESULT;
                    Location LEFT_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location LEFT_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object LEFT_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 6);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // assignment_operator ::= RIGHT_ASSIGN
                {
                    XMLElement RESULT;
                    Location RIGHT_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location RIGHT_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object RIGHT_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 7);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // assignment_operator ::= AND_ASSIGN
                {
                    XMLElement RESULT;
                    Location AND_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location AND_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object AND_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 8);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // assignment_operator ::= XOR_ASSIGN
                {
                    XMLElement RESULT;
                    Location XOR_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location XOR_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object XOR_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 9);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // assignment_operator ::= OR_ASSIGN
                {
                    XMLElement RESULT;
                    Location OR_ASSIGN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location OR_ASSIGN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object OR_ASSIGN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("assignment_operator", 10);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // expression ::= assignment_expression
                {
                    XMLElement RESULT;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("expression", 0, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // expression ::= expression COMMA assignment_expression
                {
                    XMLElement RESULT;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("expression", 1, (XMLElement) e, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // constant_expression ::= conditional_expression
                {
                    XMLElement RESULT;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("constant_expression", 0, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // declaration ::= declaration_specifiers SEMI
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration", 0, (XMLElement) ds);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // NT$0 ::=
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object idl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    if (ds.toString().indexOf(">typedef<") > 0) {
                        for (XMLElement e : ((XMLElement) idl).selectById("identifier"))
                            Parser.addType(((Terminal) e).value().toString());
                    }

                    RESULT = new XMLElement.NonTerminal("NT_0", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0", 61, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // declaration ::= declaration_specifiers init_declarator_list NT$0 SEMI
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object idl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location SEMI3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration", 1, (XMLElement) ds, (XMLElement) idl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // declaration_specifiers ::= storage_class_specifier
                {
                    XMLElement RESULT;
                    Location sccxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sccxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object scc = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_specifiers", 0, (XMLElement) scc);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // declaration_specifiers ::= storage_class_specifier declaration_specifiers
                {
                    XMLElement RESULT;
                    Location sccxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location sccxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object scc = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_specifiers", 1, (XMLElement) scc, (XMLElement) ds);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // declaration_specifiers ::= type_specifier
                {
                    XMLElement RESULT;
                    Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ts = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_specifiers", 2, (XMLElement) ts);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // declaration_specifiers ::= type_specifier declaration_specifiers
                {
                    XMLElement RESULT;
                    Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ts = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_specifiers", 3, (XMLElement) ts, (XMLElement) ds);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // declaration_specifiers ::= type_qualifier
                {
                    XMLElement RESULT;
                    Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object tq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_specifiers", 4, (XMLElement) tq);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // declaration_specifiers ::= type_qualifier declaration_specifiers
                {
                    XMLElement RESULT;
                    Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object tq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_specifiers", 5, (XMLElement) tq, (XMLElement) ds);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // init_declarator_list ::= init_declarator
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("init_declarator_list", 0, (XMLElement) id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // init_declarator_list ::= init_declarator_list COMMA init_declarator
                {
                    XMLElement RESULT;
                    Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object idl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("init_declarator_list", 1, (XMLElement) idl, (XMLElement) id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // init_declarator ::= declarator
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("init_declarator", 0, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // init_declarator ::= declarator ASSIGN initializer
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ASSIGN1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ASSIGN1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ASSIGN1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object i = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("init_declarator", 1, (XMLElement) d, (XMLElement) i);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // storage_class_specifier ::= TYPEDEF
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("storage_class_specifier", 0, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // storage_class_specifier ::= EXTERN
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("storage_class_specifier", 1, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // storage_class_specifier ::= STATIC
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("storage_class_specifier", 2, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // storage_class_specifier ::= AUTO
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("storage_class_specifier", 3, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // storage_class_specifier ::= REGISTER
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("storage_class_specifier", 4, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // type_specifier ::= VOID
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 0, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // type_specifier ::= CHAR
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 1, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // type_specifier ::= SHORT
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 2, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // type_specifier ::= INT
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 3, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // type_specifier ::= LONG
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 4, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // type_specifier ::= FLOAT
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 5, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // type_specifier ::= DOUBLE
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 6, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // type_specifier ::= SIGNED
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 7, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // type_specifier ::= UNSIGNED
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 8, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // type_specifier ::= struct_or_union_specifier
                {
                    XMLElement RESULT;
                    Location suxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location suxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object su = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 9, (XMLElement) su);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // type_specifier ::= enum_specifier
                {
                    XMLElement RESULT;
                    Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object es = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 10, (XMLElement) es);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // type_specifier ::= TYPE_NAME
                {
                    XMLElement RESULT;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_specifier", 11, new XMLElement.Terminal(typexleft, "type", type, typexright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // struct_or_union_specifier ::= STRUCT IDENTIFIER CURLYL struct_declaration_list CURLYR
                {
                    XMLElement RESULT;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location CURLYL2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sdl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR4 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_or_union_specifier", 0, new XMLElement.Terminal(sxleft, "s", s, sxright), new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) sdl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // struct_or_union_specifier ::= STRUCT CURLYL struct_declaration_list CURLYR
                {
                    XMLElement RESULT;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location CURLYL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sdl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_or_union_specifier", 1, new XMLElement.Terminal(sxleft, "s", s, sxright), (XMLElement) sdl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // struct_or_union_specifier ::= STRUCT IDENTIFIER
                {
                    XMLElement RESULT;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_or_union_specifier", 2, new XMLElement.Terminal(sxleft, "s", s, sxright), new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // struct_or_union_specifier ::= UNION IDENTIFIER CURLYL struct_declaration_list CURLYR
                {
                    XMLElement RESULT;
                    Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object u = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location CURLYL2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sdl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR4 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_or_union_specifier", 3, new XMLElement.Terminal(uxleft, "u", u, uxright), new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) sdl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // struct_or_union_specifier ::= UNION CURLYL struct_declaration_list CURLYR
                {
                    XMLElement RESULT;
                    Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object u = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location CURLYL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sdl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_or_union_specifier", 4, new XMLElement.Terminal(uxleft, "u", u, uxright), (XMLElement) sdl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // struct_or_union_specifier ::= UNION IDENTIFIER
                {
                    XMLElement RESULT;
                    Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object u = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_or_union_specifier", 5, new XMLElement.Terminal(uxleft, "u", u, uxright), new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // struct_declaration_list ::= struct_declaration
                {
                    XMLElement RESULT;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declaration_list", 0, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration_list", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // struct_declaration_list ::= struct_declaration_list struct_declaration
                {
                    XMLElement RESULT;
                    Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declaration_list", 1, (XMLElement) sl, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration_list", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMI
                {
                    XMLElement RESULT;
                    Location sqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location sqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object sq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declaration", 0, (XMLElement) sq, (XMLElement) sd);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // specifier_qualifier_list ::= type_specifier specifier_qualifier_list
                {
                    XMLElement RESULT;
                    Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ts = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object sq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("specifier_qualifier_list", 0, (XMLElement) ts, (XMLElement) sq);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // specifier_qualifier_list ::= type_specifier
                {
                    XMLElement RESULT;
                    Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ts = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("specifier_qualifier_list", 1, (XMLElement) ts);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // specifier_qualifier_list ::= type_qualifier specifier_qualifier_list
                {
                    XMLElement RESULT;
                    Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object tq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object sq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("specifier_qualifier_list", 2, (XMLElement) tq, (XMLElement) sq);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // specifier_qualifier_list ::= type_qualifier
                {
                    XMLElement RESULT;
                    Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object tq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("specifier_qualifier_list", 3, (XMLElement) tq);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // struct_declarator_list ::= struct_declarator
                {
                    XMLElement RESULT;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declarator_list", 0, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // struct_declarator_list ::= struct_declarator_list COMMA struct_declarator
                {
                    XMLElement RESULT;
                    Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object sl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declarator_list", 1, (XMLElement) sl, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // struct_declarator ::= declarator
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declarator", 0, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // struct_declarator ::= COLON constant_expression
                {
                    XMLElement RESULT;
                    Location COLON0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COLON0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COLON0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declarator", 1, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // struct_declarator ::= declarator COLON constant_expression
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COLON1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("struct_declarator", 2, (XMLElement) d, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // enum_specifier ::= ENUM CURLYL enumerator_list CURLYR
                {
                    XMLElement RESULT;
                    Location ENUM0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location ENUM0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object ENUM0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location CURLYL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object el = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("enum_specifier", 0, (XMLElement) el);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // enum_specifier ::= ENUM IDENTIFIER CURLYL enumerator_list CURLYR
                {
                    XMLElement RESULT;
                    Location ENUM0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location ENUM0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object ENUM0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location CURLYL2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object el = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR4 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("enum_specifier", 1, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) el);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // enum_specifier ::= ENUM IDENTIFIER
                {
                    XMLElement RESULT;
                    Location ENUM0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ENUM0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ENUM0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("enum_specifier", 2, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // enumerator_list ::= enumerator
                {
                    XMLElement RESULT;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("enumerator_list", 0, (XMLElement) e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator_list", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // enumerator_list ::= enumerator_list COMMA enumerator
                {
                    XMLElement RESULT;
                    Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object el = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("enumerator_list", 1, (XMLElement) el, (XMLElement) e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator_list", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // enumerator ::= IDENTIFIER
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("enumerator", 0, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // enumerator ::= IDENTIFIER ASSIGN constant_expression
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ASSIGN1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ASSIGN1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ASSIGN1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("enumerator", 1, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // type_qualifier ::= CONST
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_qualifier", 0, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // type_qualifier ::= VOLATILE
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_qualifier", 1, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // declarator ::= pointer direct_declarator
                {
                    XMLElement RESULT;
                    Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location directxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location directxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object direct = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declarator", 0, (XMLElement) p, (XMLElement) direct);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // declarator ::= direct_declarator
                {
                    XMLElement RESULT;
                    Location directxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location directxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object direct = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declarator", 1, (XMLElement) direct);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // direct_declarator ::= IDENTIFIER
                {
                    XMLElement RESULT;
                    Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object identifier = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_declarator", 0, new XMLElement.Terminal(identifierxleft, "identifier", identifier, identifierxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // direct_declarator ::= PARAL declarator PARAR
                {
                    XMLElement RESULT;
                    Location PARAL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location PARAL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object PARAL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_declarator", 1, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // direct_declarator ::= direct_declarator SQUAREDL constant_expression SQUAREDR
                {
                    XMLElement RESULT;
                    Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object dd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location SQUAREDL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location SQUAREDL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object SQUAREDL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SQUAREDR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SQUAREDR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SQUAREDR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_declarator", 2, (XMLElement) dd, (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // direct_declarator ::= direct_declarator SQUAREDL SQUAREDR
                {
                    XMLElement RESULT;
                    Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object dd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location SQUAREDL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location SQUAREDL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object SQUAREDL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SQUAREDR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SQUAREDR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SQUAREDR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_declarator", 3, (XMLElement) dd);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // direct_declarator ::= direct_declarator PARAL parameter_type_list PARAR
                {
                    XMLElement RESULT;
                    Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object dd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ptlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ptlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ptl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_declarator", 4, (XMLElement) dd, (XMLElement) ptl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // direct_declarator ::= direct_declarator PARAL identifier_list PARAR
                {
                    XMLElement RESULT;
                    Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object dd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object il = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_declarator", 5, (XMLElement) dd, (XMLElement) il);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // direct_declarator ::= direct_declarator PARAL PARAR
                {
                    XMLElement RESULT;
                    Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object dd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_declarator", 6, (XMLElement) dd);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // pointer ::= MUL
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("pointer", 0, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // pointer ::= MUL type_qualifier_list
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object tql = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("pointer", 1, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) tql);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 141: // pointer ::= MUL pointer
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("pointer", 2, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) p);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 142: // pointer ::= MUL type_qualifier_list pointer
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object tql = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("pointer", 3, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) tql, (XMLElement) p);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 143: // type_qualifier_list ::= type_qualifier
                {
                    XMLElement RESULT;
                    Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object tq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_qualifier_list", 0, (XMLElement) tq);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier_list", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 144: // type_qualifier_list ::= type_qualifier_list type_qualifier
                {
                    XMLElement RESULT;
                    Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object tql = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object tq = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_qualifier_list", 1, (XMLElement) tql, (XMLElement) tq);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier_list", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 145: // parameter_type_list ::= parameter_list
                {
                    XMLElement RESULT;
                    Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object pl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("parameter_type_list", 0, (XMLElement) pl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type_list", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 146: // parameter_type_list ::= parameter_list COMMA ELLIPSIS
                {
                    XMLElement RESULT;
                    Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object pl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("parameter_type_list", 1, (XMLElement) pl, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type_list", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 147: // parameter_list ::= parameter_declaration
                {
                    XMLElement RESULT;
                    Location pdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location pdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object pd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("parameter_list", 0, (XMLElement) pd);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list", 60, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 148: // parameter_list ::= parameter_list COMMA parameter_declaration
                {
                    XMLElement RESULT;
                    Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object pl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location pdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location pdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object pd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("parameter_list", 1, (XMLElement) pl, (XMLElement) pd);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list", 60, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 149: // parameter_declaration ::= declaration_specifiers declarator
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("parameter_declaration", 0, (XMLElement) ds, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 150: // parameter_declaration ::= declaration_specifiers abstract_declarator
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location adxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location adxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("parameter_declaration", 1, (XMLElement) ds, (XMLElement) ad);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 151: // parameter_declaration ::= declaration_specifiers
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("parameter_declaration", 2, (XMLElement) ds);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 152: // identifier_list ::= IDENTIFIER
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("identifier_list", 0, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 153: // identifier_list ::= identifier_list COMMA IDENTIFIER
                {
                    XMLElement RESULT;
                    Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object idl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("identifier_list", 1, (XMLElement) idl, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 154: // type_name ::= specifier_qualifier_list
                {
                    XMLElement RESULT;
                    Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object sl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_name", 0, (XMLElement) sl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 155: // type_name ::= specifier_qualifier_list abstract_declarator
                {
                    XMLElement RESULT;
                    Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location adxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location adxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("type_name", 1, (XMLElement) sl, (XMLElement) ad);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 156: // abstract_declarator ::= pointer
                {
                    XMLElement RESULT;
                    Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("abstract_declarator", 0, (XMLElement) p);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 157: // abstract_declarator ::= direct_abstract_declarator
                {
                    XMLElement RESULT;
                    Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object dad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("abstract_declarator", 1, (XMLElement) dad);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 158: // abstract_declarator ::= pointer direct_abstract_declarator
                {
                    XMLElement RESULT;
                    Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("abstract_declarator", 2, (XMLElement) p, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 159: // direct_abstract_declarator ::= PARAL abstract_declarator PARAR
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location adxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location adxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 0, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) ad);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 160: // direct_abstract_declarator ::= SQUAREDL SQUAREDR
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SQUAREDR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SQUAREDR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SQUAREDR1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 1, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 161: // direct_abstract_declarator ::= SQUAREDL constant_expression SQUAREDR
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SQUAREDR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SQUAREDR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SQUAREDR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 2, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 162: // direct_abstract_declarator ::= direct_abstract_declarator SQUAREDL SQUAREDR
                {
                    XMLElement RESULT;
                    Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object dad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SQUAREDR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SQUAREDR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SQUAREDR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 3, (XMLElement) dad, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 163: // direct_abstract_declarator ::= direct_abstract_declarator SQUAREDL constant_expression SQUAREDR
                {
                    XMLElement RESULT;
                    Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object dad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SQUAREDR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SQUAREDR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SQUAREDR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 4, (XMLElement) dad, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) ce);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 164: // direct_abstract_declarator ::= PARAL PARAR
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 5, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 165: // direct_abstract_declarator ::= PARAL parameter_type_list PARAR
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ptlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ptlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ptl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 6, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) ptl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 166: // direct_abstract_declarator ::= direct_abstract_declarator PARAL PARAR
                {
                    XMLElement RESULT;
                    Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object dad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 7, (XMLElement) dad, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 167: // direct_abstract_declarator ::= direct_abstract_declarator PARAL parameter_type_list PARAR
                {
                    XMLElement RESULT;
                    Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object dad = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ptlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ptlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ptl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("direct_abstract_declarator", 8, (XMLElement) dad, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) ptl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 168: // initializer ::= assignment_expression
                {
                    XMLElement RESULT;
                    Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ae = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("initializer", 0, (XMLElement) ae);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 169: // initializer ::= CURLYL initializer_list CURLYR
                {
                    XMLElement RESULT;
                    Location CURLYL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object il = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("initializer", 1, (XMLElement) il);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 170: // initializer ::= CURLYL initializer_list COMMA CURLYR
                {
                    XMLElement RESULT;
                    Location CURLYL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location CURLYL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object CURLYL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object il = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("initializer", 2, (XMLElement) il);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 171: // initializer_list ::= initializer
                {
                    XMLElement RESULT;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object i = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("initializer_list", 0, (XMLElement) i);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 172: // initializer_list ::= initializer_list COMMA initializer
                {
                    XMLElement RESULT;
                    Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object il = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COMMA1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object i = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("initializer_list", 1, (XMLElement) il, (XMLElement) i);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 173: // statement ::= labeled_statement
                {
                    XMLElement RESULT;
                    Location lsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location lsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ls = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("statement", 0, (XMLElement) ls);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 174: // NT$1 ::=
                {
                    XMLElement RESULT;
                    Parser.newScope();
                    RESULT = new XMLElement.NonTerminal("NT_1", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1", 62, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 175: // statement ::= NT$1 compound_statement
                {
                    XMLElement RESULT;
                    Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object cs = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.deleteScope();
                    RESULT = new XMLElement.NonTerminal("statement", 1, (XMLElement) cs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 176: // statement ::= expression_statement
                {
                    XMLElement RESULT;
                    Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object es = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("statement", 2, (XMLElement) es);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 177: // statement ::= selection_statement
                {
                    XMLElement RESULT;
                    Location ssxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location ssxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ss = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("statement", 3, (XMLElement) ss);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 178: // statement ::= iteration_statement
                {
                    XMLElement RESULT;
                    Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object is = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("statement", 4, (XMLElement) is);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 179: // statement ::= jump_statement
                {
                    XMLElement RESULT;
                    Location jsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location jsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object js = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("statement", 5, (XMLElement) js);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 180: // labeled_statement ::= IDENTIFIER COLON statement
                {
                    XMLElement RESULT;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COLON1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("labeled_statement", 0, new XMLElement.Terminal(idxleft, "id", id, idxright), (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 181: // labeled_statement ::= CASE constant_expression COLON statement
                {
                    XMLElement RESULT;
                    Location CASE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location CASE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object CASE0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ce = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COLON2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("labeled_statement", 1, (XMLElement) ce, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 182: // labeled_statement ::= DEFAULT COLON statement
                {
                    XMLElement RESULT;
                    Location DEFAULT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location DEFAULT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object DEFAULT0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object COLON1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("labeled_statement", 2, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 183: // compound_statement ::= CURLYL CURLYR
                {
                    XMLElement RESULT;
                    Location CURLYL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location CURLYL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object CURLYL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("compound_statement", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 184: // compound_statement ::= CURLYL statement_list CURLYR
                {
                    XMLElement RESULT;
                    Location CURLYL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("compound_statement", 1, (XMLElement) sl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 185: // compound_statement ::= CURLYL declaration_list CURLYR
                {
                    XMLElement RESULT;
                    Location CURLYL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location CURLYL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object CURLYL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object dl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("compound_statement", 2, (XMLElement) dl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 186: // compound_statement ::= CURLYL declaration_list statement_list CURLYR
                {
                    XMLElement RESULT;
                    Location CURLYL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location CURLYL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object CURLYL0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object dl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location CURLYR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location CURLYR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object CURLYR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("compound_statement", 3, (XMLElement) dl, (XMLElement) sl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 187: // declaration_list ::= declaration
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_list", 0, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list", 58, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 188: // declaration_list ::= declaration_list declaration
                {
                    XMLElement RESULT;
                    Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object dl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("declaration_list", 1, (XMLElement) dl, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list", 58, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 189: // statement_list ::= statement
                {
                    XMLElement RESULT;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("statement_list", 0, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list", 54, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 190: // statement_list ::= statement_list statement
                {
                    XMLElement RESULT;
                    Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object sl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("statement_list", 1, (XMLElement) sl, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list", 54, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 191: // expression_statement ::= SEMI
                {
                    XMLElement RESULT;
                    Location SEMI0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("expression_statement", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement", 55, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 192: // expression_statement ::= expression SEMI
                {
                    XMLElement RESULT;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("expression_statement", 1, (XMLElement) e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement", 55, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 193: // selection_statement ::= IF PARAL expression PARAR statement
                {
                    XMLElement RESULT;
                    Location IF0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location IF0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object IF0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("selection_statement", 0, (XMLElement) e, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 194: // selection_statement ::= IF PARAL expression PARAR statement ELSE statement
                {
                    XMLElement RESULT;
                    Location IF0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xleft;
                    Location IF0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xright;
                    Object IF0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object s1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location ELSE5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location ELSE5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ELSE5 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("selection_statement", 1, (XMLElement) e, (XMLElement) s1, (XMLElement) s2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 195: // selection_statement ::= SWITCH PARAL expression PARAR statement
                {
                    XMLElement RESULT;
                    Location SWITCH0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location SWITCH0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object SWITCH0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("selection_statement", 2, (XMLElement) e, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 196: // iteration_statement ::= WHILE PARAL expression PARAR statement
                {
                    XMLElement RESULT;
                    Location WHILE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location WHILE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object WHILE0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAR3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("iteration_statement", 0, (XMLElement) e, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 197: // iteration_statement ::= DO statement WHILE PARAL expression PARAR SEMI
                {
                    XMLElement RESULT;
                    Location DO0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xleft;
                    Location DO0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xright;
                    Object DO0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location WHILE2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location WHILE2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object WHILE2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location PARAL3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location PARAL3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object PARAL3 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAR5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAR5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAR5 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI6 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("iteration_statement", 1, (XMLElement) s, (XMLElement) e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 198: // iteration_statement ::= FOR PARAL expression_statement expression_statement PARAR statement
                {
                    XMLElement RESULT;
                    Location FOR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location FOR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    Object FOR0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location es1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location es1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object es1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location es2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location es2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object es2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAR4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAR4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAR4 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("iteration_statement", 2, (XMLElement) es1, (XMLElement) es2, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 199: // iteration_statement ::= FOR PARAL expression_statement expression_statement expression PARAR statement
                {
                    XMLElement RESULT;
                    Location FOR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xleft;
                    Location FOR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xright;
                    Object FOR0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    Location PARAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location PARAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    Object PARAL1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location es1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location es1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object es1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location es2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location es2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object es2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location PARAR5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location PARAR5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object PARAR5 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object s = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("iteration_statement", 3, (XMLElement) es1, (XMLElement) es2, (XMLElement) e, (XMLElement) s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 200: // jump_statement ::= GOTO IDENTIFIER SEMI
                {
                    XMLElement RESULT;
                    Location GOTO0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location GOTO0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object GOTO0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("jump_statement", 0, new XMLElement.Terminal(idxleft, "id", id, idxright));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 201: // jump_statement ::= CONTINUE SEMI
                {
                    XMLElement RESULT;
                    Location CONTINUE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location CONTINUE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object CONTINUE0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("jump_statement", 1);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 202: // jump_statement ::= BREAK SEMI
                {
                    XMLElement RESULT;
                    Location BREAK0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location BREAK0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object BREAK0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("jump_statement", 2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 203: // jump_statement ::= RETURN SEMI
                {
                    XMLElement RESULT;
                    Location RETURN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location RETURN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object RETURN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("jump_statement", 3);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 204: // jump_statement ::= RETURN expression SEMI
                {
                    XMLElement RESULT;
                    Location RETURN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location RETURN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object RETURN0 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location SEMI2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location SEMI2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object SEMI2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("jump_statement", 4, (XMLElement) e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 205: // translation_unit ::= external_declaration
                {
                    XMLElement RESULT;
                    Location edxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location edxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ed = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("translation_unit", 0, (XMLElement) ed);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 206: // translation_unit ::= translation_unit external_declaration
                {
                    XMLElement RESULT;
                    Location tuxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location tuxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object tu = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location edxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location edxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object ed = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("translation_unit", 1, (XMLElement) tu, (XMLElement) ed);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 207: // external_declaration ::= function_definition
                {
                    XMLElement RESULT;
                    Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object fd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("external_declaration", 0, (XMLElement) fd);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration", 56, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 208: // external_declaration ::= declaration
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    RESULT = new XMLElement.NonTerminal("external_declaration", 1, (XMLElement) d);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration", 56, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 209: // NT$2 ::=
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object dl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.newScope();
                    RESULT = new XMLElement.NonTerminal("NT_2", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2", 63, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 210: // function_definition ::= declaration_specifiers declarator declaration_list NT$2 compound_statement
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object dl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object cs = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.deleteScope();
                    RESULT = new XMLElement.NonTerminal("function_definition", 0, (XMLElement) ds, (XMLElement) d, (XMLElement) dl, (XMLElement) cs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition", 57, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 211: // NT$3 ::=
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.newScope();
                    RESULT = new XMLElement.NonTerminal("NT_3", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3", 64, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 212: // function_definition ::= declaration_specifiers declarator NT$3 compound_statement
                {
                    XMLElement RESULT;
                    Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object ds = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object cs = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.deleteScope();
                    RESULT = new XMLElement.NonTerminal("function_definition", 1, (XMLElement) ds, (XMLElement) d, (XMLElement) cs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition", 57, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 213: // NT$4 ::=
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object dl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.newScope();
                    RESULT = new XMLElement.NonTerminal("NT_4", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4", 65, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 214: // function_definition ::= declarator declaration_list NT$4 compound_statement
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object dl = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object cs = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.deleteScope();
                    RESULT = new XMLElement.NonTerminal("function_definition", 2, (XMLElement) d, (XMLElement) dl, (XMLElement) cs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition", 57, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 215: // NT$5 ::=
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.newScope();
                    RESULT = new XMLElement.NonTerminal("NT_5", 0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5", 66, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 216: // function_definition ::= declarator NT$5 compound_statement
                {
                    XMLElement RESULT;
                    Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object cs = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Parser.deleteScope();
                    RESULT = new XMLElement.NonTerminal("function_definition", 3, (XMLElement) d, (XMLElement) cs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition", 57, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
